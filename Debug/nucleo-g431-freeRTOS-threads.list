
nucleo-g431-freeRTOS-threads.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a4c  08006a4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a54  08006a54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a54  08006a54  00016a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a48  20000010  08006a6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a58  08006a6c  00021a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bec8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031c7  00000000  00000000  0003bf08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b8  00000000  00000000  0003f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  00040788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000031ef  00000000  00000000  00041cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012457  00000000  00000000  00044ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf009  00000000  00000000  0005731e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126327  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000603c  00000000  00000000  001263a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800699c 	.word	0x0800699c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800699c 	.word	0x0800699c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fa87 	bl	8000a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f826 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f8d4 	bl	80006d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000530:	f000 f886 	bl	8000640 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f003 fcc0 	bl	8003eb8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <main+0x40>)
 800053a:	2100      	movs	r1, #0
 800053c:	4809      	ldr	r0, [pc, #36]	; (8000564 <main+0x44>)
 800053e:	f003 fd25 	bl	8003f8c <osThreadNew>
 8000542:	4602      	mov	r2, r0
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <main+0x48>)
 8000546:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <main+0x4c>)
 800054a:	2100      	movs	r1, #0
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <main+0x50>)
 800054e:	f003 fd1d 	bl	8003f8c <osThreadNew>
 8000552:	4602      	mov	r2, r0
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <main+0x54>)
 8000556:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f003 fce2 	bl	8003f20 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x3c>
 800055e:	bf00      	nop
 8000560:	080069ec 	.word	0x080069ec
 8000564:	08000759 	.word	0x08000759
 8000568:	200019c0 	.word	0x200019c0
 800056c:	08006a10 	.word	0x08006a10
 8000570:	08000779 	.word	0x08000779
 8000574:	200019c4 	.word	0x200019c4

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b0a4      	sub	sp, #144	; 0x90
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000582:	2238      	movs	r2, #56	; 0x38
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 f9ff 	bl	800698a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2244      	movs	r2, #68	; 0x44
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 f9f1 	bl	800698a <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fd0f 	bl	8000fcc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005c8:	2355      	movs	r3, #85	; 0x55
 80005ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fd95 	bl	8001114 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005f0:	f000 f8e4 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2303      	movs	r3, #3
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000608:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800060c:	2108      	movs	r1, #8
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f898 	bl	8001744 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800061a:	f000 f8cf 	bl	80007bc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800061e:	2302      	movs	r3, #2
 8000620:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fad9 	bl	8001be0 <HAL_RCCEx_PeriphCLKConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000634:	f000 f8c2 	bl	80007bc <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3790      	adds	r7, #144	; 0x90
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000646:	4a23      	ldr	r2, [pc, #140]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800064c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800068a:	f001 ffaf 	bl	80025ec <HAL_UART_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000694:	f000 f892 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 800069c:	f003 fb1f 	bl	8003cde <HAL_UARTEx_SetTxFifoThreshold>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006a6:	f000 f889 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 80006ae:	f003 fb54 	bl	8003d5a <HAL_UARTEx_SetRxFifoThreshold>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006b8:	f000 f880 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_USART2_UART_Init+0x90>)
 80006be:	f003 fad5 	bl	8003c6c <HAL_UARTEx_DisableFifoMode>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006c8:	f000 f878 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20001934 	.word	0x20001934
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_GPIO_Init+0x78>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <MX_GPIO_Init+0x78>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_GPIO_Init+0x78>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_GPIO_Init+0x78>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a11      	ldr	r2, [pc, #68]	; (8000750 <MX_GPIO_Init+0x78>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_GPIO_Init+0x78>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <MX_GPIO_Init+0x7c>)
 8000726:	f000 fc1f 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800072a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800072e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4619      	mov	r1, r3
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0x7c>)
 8000744:	f000 fa8e 	bl	8000c64 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	48000400 	.word	0x48000400

08000758 <StartBlink01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <StartBlink01+0x1c>)
 8000766:	f000 fc17 	bl	8000f98 <HAL_GPIO_TogglePin>
	  //HAL_Delay(100);
    osDelay(500);
 800076a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076e:	f003 fcb3 	bl	80040d8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000772:	e7f5      	b.n	8000760 <StartBlink01+0x8>
 8000774:	48000400 	.word	0x48000400

08000778 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <StartBlink02+0x1c>)
 8000786:	f000 fc07 	bl	8000f98 <HAL_GPIO_TogglePin>
    osDelay(600);
 800078a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800078e:	f003 fca3 	bl	80040d8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000792:	e7f5      	b.n	8000780 <StartBlink02+0x8>
 8000794:	48000400 	.word	0x48000400

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 f95d 	bl	8000a68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40001000 	.word	0x40001000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6093      	str	r3, [r2, #8]
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40007000 	.word	0x40007000

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_MspInit+0x50>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <HAL_MspInit+0x50>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x50>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_MspInit+0x50>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <HAL_MspInit+0x50>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	; 0x58
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x50>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 f9f3 	bl	8000c14 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800082e:	f7ff ffcd 	bl	80007cc <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_UART_MspInit+0x7c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d128      	bne.n	80008b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	6593      	str	r3, [r2, #88]	; 0x58
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_UART_MspInit+0x80>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000892:	230c      	movs	r3, #12
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a2:	2307      	movs	r3, #7
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 f9d8 	bl	8000c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	2036      	movs	r0, #54	; 0x36
 80008da:	f000 f99b 	bl	8000c14 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80008de:	2036      	movs	r0, #54	; 0x36
 80008e0:	f000 f9b2 	bl	8000c48 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_InitTick+0x9c>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0x9c>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6593      	str	r3, [r2, #88]	; 0x58
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_InitTick+0x9c>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fc:	f107 0210 	add.w	r2, r7, #16
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f8f2 	bl	8001af0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090c:	f001 f8c4 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8000910:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <HAL_InitTick+0xa0>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	3b01      	subs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_InitTick+0xa4>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <HAL_InitTick+0xa8>)
 8000924:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_InitTick+0xa4>)
 8000928:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_InitTick+0xa4>)
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_InitTick+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_InitTick+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <HAL_InitTick+0xa4>)
 8000942:	f001 fb3d 	bl	8001fc0 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d104      	bne.n	8000956 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <HAL_InitTick+0xa4>)
 800094e:	f001 fb99 	bl	8002084 <HAL_TIM_Base_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	431bde83 	.word	0x431bde83
 8000968:	200019c8 	.word	0x200019c8
 800096c:	40001000 	.word	0x40001000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <TIM6_DAC_IRQHandler+0x10>)
 80009aa:	f001 fba1 	bl	80020f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200019c8 	.word	0x200019c8

080009b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <SystemInit+0x28>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <SystemInit+0x28>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SystemInit+0x28>)
 80009ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d2:	609a      	str	r2, [r3, #8]
#endif
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0e:	f7ff ffd3 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f005 ff8b 	bl	800692c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a16:	f7ff fd83 	bl	8000520 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   r0, =_estack
 8000a1c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a28:	08006a5c 	.word	0x08006a5c
  ldr r2, =_sbss
 8000a2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a30:	20001a58 	.word	0x20001a58

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>

08000a36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f8dc 	bl	8000bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff ff3c 	bl	80008c4 <HAL_InitTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e001      	b.n	8000a5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a58:	f7ff fec8 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x1c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x20>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <HAL_IncTick+0x1c>)
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	20001a14 	.word	0x20001a14
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <HAL_GetTick+0x14>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20001a14 	.word	0x20001a14

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff4c 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c22:	f7ff ff63 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f7ff ffb3 	bl	8000b98 <NVIC_EncodePriority>
 8000c32:	4602      	mov	r2, r0
 8000c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff82 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff56 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c72:	e15a      	b.n	8000f2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 814c 	beq.w	8000f24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d00b      	beq.n	8000cac <HAL_GPIO_Init+0x48>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d007      	beq.n	8000cac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca0:	2b11      	cmp	r3, #17
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b12      	cmp	r3, #18
 8000caa:	d130      	bne.n	8000d0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	091b      	lsrs	r3, r3, #4
 8000cf8:	f003 0201 	and.w	r2, r3, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0xea>
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b12      	cmp	r3, #18
 8000d4c:	d123      	bne.n	8000d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	6939      	ldr	r1, [r7, #16]
 8000d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0203 	and.w	r2, r3, #3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 80a6 	beq.w	8000f24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd8:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <HAL_GPIO_Init+0x2e4>)
 8000dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ddc:	4a5a      	ldr	r2, [pc, #360]	; (8000f48 <HAL_GPIO_Init+0x2e4>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6613      	str	r3, [r2, #96]	; 0x60
 8000de4:	4b58      	ldr	r3, [pc, #352]	; (8000f48 <HAL_GPIO_Init+0x2e4>)
 8000de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df0:	4a56      	ldr	r2, [pc, #344]	; (8000f4c <HAL_GPIO_Init+0x2e8>)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e1a:	d01f      	beq.n	8000e5c <HAL_GPIO_Init+0x1f8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a4c      	ldr	r2, [pc, #304]	; (8000f50 <HAL_GPIO_Init+0x2ec>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d019      	beq.n	8000e58 <HAL_GPIO_Init+0x1f4>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a4b      	ldr	r2, [pc, #300]	; (8000f54 <HAL_GPIO_Init+0x2f0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d013      	beq.n	8000e54 <HAL_GPIO_Init+0x1f0>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a4a      	ldr	r2, [pc, #296]	; (8000f58 <HAL_GPIO_Init+0x2f4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00d      	beq.n	8000e50 <HAL_GPIO_Init+0x1ec>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a49      	ldr	r2, [pc, #292]	; (8000f5c <HAL_GPIO_Init+0x2f8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d007      	beq.n	8000e4c <HAL_GPIO_Init+0x1e8>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a48      	ldr	r2, [pc, #288]	; (8000f60 <HAL_GPIO_Init+0x2fc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d101      	bne.n	8000e48 <HAL_GPIO_Init+0x1e4>
 8000e44:	2305      	movs	r3, #5
 8000e46:	e00a      	b.n	8000e5e <HAL_GPIO_Init+0x1fa>
 8000e48:	2306      	movs	r3, #6
 8000e4a:	e008      	b.n	8000e5e <HAL_GPIO_Init+0x1fa>
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	e006      	b.n	8000e5e <HAL_GPIO_Init+0x1fa>
 8000e50:	2303      	movs	r3, #3
 8000e52:	e004      	b.n	8000e5e <HAL_GPIO_Init+0x1fa>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e002      	b.n	8000e5e <HAL_GPIO_Init+0x1fa>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <HAL_GPIO_Init+0x1fa>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	f002 0203 	and.w	r2, r2, #3
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	4093      	lsls	r3, r2
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6e:	4937      	ldr	r1, [pc, #220]	; (8000f4c <HAL_GPIO_Init+0x2e8>)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e7c:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ea0:	4a30      	ldr	r2, [pc, #192]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ea6:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eca:	4a26      	ldr	r2, [pc, #152]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed0:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3301      	adds	r3, #1
 8000f28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	fa22 f303 	lsr.w	r3, r2, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f47f ae9d 	bne.w	8000c74 <HAL_GPIO_Init+0x10>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	48000400 	.word	0x48000400
 8000f54:	48000800 	.word	0x48000800
 8000f58:	48000c00 	.word	0x48000c00
 8000f5c:	48001000 	.word	0x48001000
 8000f60:	48001400 	.word	0x48001400
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb8:	887a      	ldrh	r2, [r7, #2]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	619a      	str	r2, [r3, #24]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d141      	bne.n	800105e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fda:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe6:	d131      	bne.n	800104c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fe8:	4b47      	ldr	r3, [pc, #284]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fee:	4a46      	ldr	r2, [pc, #280]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff8:	4b43      	ldr	r3, [pc, #268]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001000:	4a41      	ldr	r2, [pc, #260]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001008:	4b40      	ldr	r3, [pc, #256]	; (800110c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2232      	movs	r2, #50	; 0x32
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	4a3f      	ldr	r2, [pc, #252]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001014:	fba2 2303 	umull	r2, r3, r2, r3
 8001018:	0c9b      	lsrs	r3, r3, #18
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800101e:	e002      	b.n	8001026 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3b01      	subs	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001032:	d102      	bne.n	800103a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f2      	bne.n	8001020 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800103a:	4b33      	ldr	r3, [pc, #204]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001046:	d158      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e057      	b.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001052:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800105c:	e04d      	b.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001064:	d141      	bne.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800106e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001072:	d131      	bne.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800107a:	4a23      	ldr	r2, [pc, #140]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800108c:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2232      	movs	r2, #50	; 0x32
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010aa:	e002      	b.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010be:	d102      	bne.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f2      	bne.n	80010ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d2:	d112      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e011      	b.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010e8:	e007      	b.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40007000 	.word	0x40007000
 800110c:	20000000 	.word	0x20000000
 8001110:	431bde83 	.word	0x431bde83

08001114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e308      	b.n	8001738 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d075      	beq.n	800121e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001132:	4ba3      	ldr	r3, [pc, #652]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800113c:	4ba0      	ldr	r3, [pc, #640]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b0c      	cmp	r3, #12
 800114a:	d102      	bne.n	8001152 <HAL_RCC_OscConfig+0x3e>
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d002      	beq.n	8001158 <HAL_RCC_OscConfig+0x44>
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b08      	cmp	r3, #8
 8001156:	d10b      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	4b99      	ldr	r3, [pc, #612]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d05b      	beq.n	800121c <HAL_RCC_OscConfig+0x108>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d157      	bne.n	800121c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e2e3      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d106      	bne.n	8001188 <HAL_RCC_OscConfig+0x74>
 800117a:	4b91      	ldr	r3, [pc, #580]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a90      	ldr	r2, [pc, #576]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e01d      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x98>
 8001192:	4b8b      	ldr	r3, [pc, #556]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a8a      	ldr	r2, [pc, #552]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b88      	ldr	r3, [pc, #544]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a87      	ldr	r2, [pc, #540]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e00b      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 80011ac:	4b84      	ldr	r3, [pc, #528]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a83      	ldr	r2, [pc, #524]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a80      	ldr	r2, [pc, #512]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc5e 	bl	8000a8c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fc5a 	bl	8000a8c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e2a8      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011e6:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0xc0>
 80011f2:	e014      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc4a 	bl	8000a8c <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fc46 	bl	8000a8c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	; 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e294      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800120e:	4b6c      	ldr	r3, [pc, #432]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0xe8>
 800121a:	e000      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d075      	beq.n	8001316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122a:	4b65      	ldr	r3, [pc, #404]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001234:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b0c      	cmp	r3, #12
 8001242:	d102      	bne.n	800124a <HAL_RCC_OscConfig+0x136>
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d002      	beq.n	8001250 <HAL_RCC_OscConfig+0x13c>
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2b04      	cmp	r3, #4
 800124e:	d11f      	bne.n	8001290 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001250:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_OscConfig+0x154>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e267      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	061b      	lsls	r3, r3, #24
 8001276:	4952      	ldr	r1, [pc, #328]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800127c:	4b51      	ldr	r3, [pc, #324]	; (80013c4 <HAL_RCC_OscConfig+0x2b0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fb1f 	bl	80008c4 <HAL_InitTick>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d043      	beq.n	8001314 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e253      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d023      	beq.n	80012e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001298:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a48      	ldr	r2, [pc, #288]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fbf2 	bl	8000a8c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fbee 	bl	8000a8c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e23c      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012be:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	061b      	lsls	r3, r3, #24
 80012d8:	4939      	ldr	r1, [pc, #228]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
 80012de:	e01a      	b.n	8001316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e0:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a36      	ldr	r2, [pc, #216]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fbce 	bl	8000a8c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f4:	f7ff fbca 	bl	8000a8c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e218      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1e0>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d03c      	beq.n	800139c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01c      	beq.n	8001364 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001330:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133a:	f7ff fba7 	bl	8000a8c <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fba3 	bl	8000a8c <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e1f1      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0ef      	beq.n	8001342 <HAL_RCC_OscConfig+0x22e>
 8001362:	e01b      	b.n	800139c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001374:	f7ff fb8a 	bl	8000a8c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff fb86 	bl	8000a8c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1d4      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1ef      	bne.n	800137c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80ab 	beq.w	8001500 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d106      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2b4>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e005      	b.n	80013ca <HAL_RCC_OscConfig+0x2b6>
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	20000004 	.word	0x20000004
 80013c8:	2300      	movs	r3, #0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00d      	beq.n	80013ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4baf      	ldr	r3, [pc, #700]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4aae      	ldr	r2, [pc, #696]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4bac      	ldr	r3, [pc, #688]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ea:	4ba9      	ldr	r3, [pc, #676]	; (8001690 <HAL_RCC_OscConfig+0x57c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013f6:	4ba6      	ldr	r3, [pc, #664]	; (8001690 <HAL_RCC_OscConfig+0x57c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4aa5      	ldr	r2, [pc, #660]	; (8001690 <HAL_RCC_OscConfig+0x57c>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff fb43 	bl	8000a8c <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff fb3f 	bl	8000a8c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e18d      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800141c:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <HAL_RCC_OscConfig+0x57c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d108      	bne.n	8001442 <HAL_RCC_OscConfig+0x32e>
 8001430:	4b96      	ldr	r3, [pc, #600]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001436:	4a95      	ldr	r2, [pc, #596]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001440:	e024      	b.n	800148c <HAL_RCC_OscConfig+0x378>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d110      	bne.n	800146c <HAL_RCC_OscConfig+0x358>
 800144a:	4b90      	ldr	r3, [pc, #576]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800144c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001450:	4a8e      	ldr	r2, [pc, #568]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145a:	4b8c      	ldr	r3, [pc, #560]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800145c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001460:	4a8a      	ldr	r2, [pc, #552]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800146a:	e00f      	b.n	800148c <HAL_RCC_OscConfig+0x378>
 800146c:	4b87      	ldr	r3, [pc, #540]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001472:	4a86      	ldr	r2, [pc, #536]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800147c:	4b83      	ldr	r3, [pc, #524]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800147e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001482:	4a82      	ldr	r2, [pc, #520]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d016      	beq.n	80014c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001494:	f7ff fafa 	bl	8000a8c <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff faf6 	bl	8000a8c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e142      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b2:	4b76      	ldr	r3, [pc, #472]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80014b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0ed      	beq.n	800149c <HAL_RCC_OscConfig+0x388>
 80014c0:	e015      	b.n	80014ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c2:	f7ff fae3 	bl	8000a8c <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c8:	e00a      	b.n	80014e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff fadf 	bl	8000a8c <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e12b      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e0:	4b6a      	ldr	r3, [pc, #424]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ed      	bne.n	80014ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014ee:	7ffb      	ldrb	r3, [r7, #31]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f4:	4b65      	ldr	r3, [pc, #404]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	4a64      	ldr	r2, [pc, #400]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80014fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	2b00      	cmp	r3, #0
 800150a:	d03c      	beq.n	8001586 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01c      	beq.n	800154e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001514:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800151a:	4a5c      	ldr	r2, [pc, #368]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff fab2 	bl	8000a8c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800152c:	f7ff faae 	bl	8000a8c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0fc      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ef      	beq.n	800152c <HAL_RCC_OscConfig+0x418>
 800154c:	e01b      	b.n	8001586 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800154e:	4b4f      	ldr	r3, [pc, #316]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001554:	4a4d      	ldr	r2, [pc, #308]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff fa95 	bl	8000a8c <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001566:	f7ff fa91 	bl	8000a8c <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0df      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001578:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800157a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ef      	bne.n	8001566 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80d3 	beq.w	8001736 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001590:	4b3e      	ldr	r3, [pc, #248]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b0c      	cmp	r3, #12
 800159a:	f000 808d 	beq.w	80016b8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d15a      	bne.n	800165c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b39      	ldr	r3, [pc, #228]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a38      	ldr	r2, [pc, #224]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80015ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fa6b 	bl	8000a8c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fa67 	bl	8000a8c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0b5      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d8:	4b2c      	ldr	r3, [pc, #176]	; (800168c <HAL_RCC_OscConfig+0x578>)
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <HAL_RCC_OscConfig+0x580>)
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6a11      	ldr	r1, [r2, #32]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015e8:	3a01      	subs	r2, #1
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	4311      	orrs	r1, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015f2:	0212      	lsls	r2, r2, #8
 80015f4:	4311      	orrs	r1, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	3a01      	subs	r2, #1
 80015fe:	0552      	lsls	r2, r2, #21
 8001600:	4311      	orrs	r1, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001606:	0852      	lsrs	r2, r2, #1
 8001608:	3a01      	subs	r2, #1
 800160a:	0652      	lsls	r2, r2, #25
 800160c:	4311      	orrs	r1, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001612:	06d2      	lsls	r2, r2, #27
 8001614:	430a      	orrs	r2, r1
 8001616:	491d      	ldr	r1, [pc, #116]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001618:	4313      	orrs	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1a      	ldr	r2, [pc, #104]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001626:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001632:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fa2a 	bl	8000a8c <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fa26 	bl	8000a8c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e074      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x528>
 800165a:	e06c      	b.n	8001736 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0a      	ldr	r2, [pc, #40]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_RCC_OscConfig+0x578>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_RCC_OscConfig+0x578>)
 800167a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fa02 	bl	8000a8c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168a:	e00e      	b.n	80016aa <HAL_RCC_OscConfig+0x596>
 800168c:	40021000 	.word	0x40021000
 8001690:	40007000 	.word	0x40007000
 8001694:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff f9f8 	bl	8000a8c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e046      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_RCC_OscConfig+0x62c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x584>
 80016b6:	e03e      	b.n	8001736 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e039      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_RCC_OscConfig+0x62c>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d12c      	bne.n	8001732 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	3b01      	subs	r3, #1
 80016e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d123      	bne.n	8001732 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11b      	bne.n	8001732 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d113      	bne.n	8001732 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	3b01      	subs	r3, #1
 8001718:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d109      	bne.n	8001732 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e11e      	b.n	800199a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4b91      	ldr	r3, [pc, #580]	; (80019a4 <HAL_RCC_ClockConfig+0x260>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d910      	bls.n	800178c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b8e      	ldr	r3, [pc, #568]	; (80019a4 <HAL_RCC_ClockConfig+0x260>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 020f 	bic.w	r2, r3, #15
 8001772:	498c      	ldr	r1, [pc, #560]	; (80019a4 <HAL_RCC_ClockConfig+0x260>)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b8a      	ldr	r3, [pc, #552]	; (80019a4 <HAL_RCC_ClockConfig+0x260>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e106      	b.n	800199a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d073      	beq.n	8001880 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d129      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a0:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0f4      	b.n	800199a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017b0:	f000 f9d0 	bl	8001b54 <RCC_GetSysClockFreqFromPLLSource>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4a7c      	ldr	r2, [pc, #496]	; (80019ac <HAL_RCC_ClockConfig+0x268>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d93f      	bls.n	800183e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017be:	4b7a      	ldr	r3, [pc, #488]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d033      	beq.n	800183e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d12f      	bne.n	800183e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017de:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017e6:	4a70      	ldr	r2, [pc, #448]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80017e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e024      	b.n	800183e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d107      	bne.n	800180c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fc:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0c6      	b.n	800199a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180c:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0be      	b.n	800199a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800181c:	f000 f8ce 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 8001820:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4a61      	ldr	r2, [pc, #388]	; (80019ac <HAL_RCC_ClockConfig+0x268>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d909      	bls.n	800183e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001832:	4a5d      	ldr	r2, [pc, #372]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4957      	ldr	r1, [pc, #348]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001850:	f7ff f91c 	bl	8000a8c <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff f918 	bl	8000a8c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e095      	b.n	800199a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d023      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001898:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 800189e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018b0:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80018b8:	4a3b      	ldr	r2, [pc, #236]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80018ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4936      	ldr	r1, [pc, #216]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b80      	cmp	r3, #128	; 0x80
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018da:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4a32      	ldr	r2, [pc, #200]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 80018e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e6:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_RCC_ClockConfig+0x260>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d21d      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_ClockConfig+0x260>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 020f 	bic.w	r2, r3, #15
 80018fc:	4929      	ldr	r1, [pc, #164]	; (80019a4 <HAL_RCC_ClockConfig+0x260>)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001904:	f7ff f8c2 	bl	8000a8c <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff f8be 	bl	8000a8c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e03b      	b.n	800199a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_ClockConfig+0x260>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d1ed      	bne.n	800190c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4917      	ldr	r1, [pc, #92]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490f      	ldr	r1, [pc, #60]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800196e:	f000 f825 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 8001972:	4601      	mov	r1, r0
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <HAL_RCC_ClockConfig+0x26c>)
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	fa21 f303 	lsr.w	r3, r1, r3
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_RCC_ClockConfig+0x270>)
 800198c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RCC_ClockConfig+0x274>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe ff96 	bl	80008c4 <HAL_InitTick>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000
 80019a8:	40021000 	.word	0x40021000
 80019ac:	04c4b400 	.word	0x04c4b400
 80019b0:	08006a34 	.word	0x08006a34
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d102      	bne.n	80019d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	e047      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019e0:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	e03e      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d136      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3301      	adds	r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a10:	4a1a      	ldr	r2, [pc, #104]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1a:	68d2      	ldr	r2, [r2, #12]
 8001a1c:	0a12      	lsrs	r2, r2, #8
 8001a1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
      break;
 8001a28:	e00c      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a34:	68d2      	ldr	r2, [r2, #12]
 8001a36:	0a12      	lsrs	r2, r2, #8
 8001a38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
      break;
 8001a42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0e5b      	lsrs	r3, r3, #25
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	e001      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a64:	693b      	ldr	r3, [r7, #16]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	007a1200 	.word	0x007a1200

08001a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0a1b      	lsrs	r3, r3, #8
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08006a44 	.word	0x08006a44

08001ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ac8:	f7ff ffda 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001acc:	4601      	mov	r1, r0
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0adb      	lsrs	r3, r3, #11
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08006a44 	.word	0x08006a44

08001af0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220f      	movs	r2, #15
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_RCC_GetClockConfig+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 020f 	and.w	r2, r3, #15
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40022000 	.word	0x40022000

08001b54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d10c      	bne.n	8001b92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b78:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b82:	68d2      	ldr	r2, [r2, #12]
 8001b84:	0a12      	lsrs	r2, r2, #8
 8001b86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
    break;
 8001b90:	e00c      	b.n	8001bac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b9c:	68d2      	ldr	r2, [r2, #12]
 8001b9e:	0a12      	lsrs	r2, r2, #8
 8001ba0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ba4:	fb02 f303 	mul.w	r3, r2, r3
 8001ba8:	617b      	str	r3, [r7, #20]
    break;
 8001baa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0e5b      	lsrs	r3, r3, #25
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bc6:	687b      	ldr	r3, [r7, #4]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	007a1200 	.word	0x007a1200
 8001bdc:	00f42400 	.word	0x00f42400

08001be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001be8:	2300      	movs	r3, #0
 8001bea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bec:	2300      	movs	r3, #0
 8001bee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8098 	beq.w	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10d      	bne.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	4a3f      	ldr	r2, [pc, #252]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c26:	2301      	movs	r3, #1
 8001c28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a39      	ldr	r2, [pc, #228]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c36:	f7fe ff29 	bl	8000a8c <HAL_GetTick>
 8001c3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c3c:	e009      	b.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7fe ff25 	bl	8000a8c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d902      	bls.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	74fb      	strb	r3, [r7, #19]
        break;
 8001c50:	e005      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c52:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ef      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c5e:	7cfb      	ldrb	r3, [r7, #19]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d159      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01e      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d019      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c8c:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cac:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fee5 	bl	8000a8c <HAL_GetTick>
 8001cc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc4:	e00b      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe fee1 	bl	8000a8c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d902      	bls.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	74fb      	strb	r3, [r7, #19]
            break;
 8001cdc:	e006      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ec      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001cec:	7cfb      	ldrb	r3, [r7, #19]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	4903      	ldr	r1, [pc, #12]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d08:	e008      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	74bb      	strb	r3, [r7, #18]
 8001d0e:	e005      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d1c:	7c7b      	ldrb	r3, [r7, #17]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d105      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d22:	4ba6      	ldr	r3, [pc, #664]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	4aa5      	ldr	r2, [pc, #660]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00a      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d3a:	4ba0      	ldr	r3, [pc, #640]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d40:	f023 0203 	bic.w	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	499c      	ldr	r1, [pc, #624]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00a      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d5c:	4b97      	ldr	r3, [pc, #604]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	f023 020c 	bic.w	r2, r3, #12
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	4994      	ldr	r1, [pc, #592]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d7e:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	498b      	ldr	r1, [pc, #556]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00a      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001da0:	4b86      	ldr	r3, [pc, #536]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	4983      	ldr	r1, [pc, #524]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dc2:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	497a      	ldr	r1, [pc, #488]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00a      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001de4:	4b75      	ldr	r3, [pc, #468]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	4972      	ldr	r1, [pc, #456]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e06:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	4969      	ldr	r1, [pc, #420]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00a      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e28:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4961      	ldr	r1, [pc, #388]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	4958      	ldr	r1, [pc, #352]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d015      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	4950      	ldr	r1, [pc, #320]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e8a:	d105      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a4a      	ldr	r2, [pc, #296]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d015      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ea4:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	4942      	ldr	r1, [pc, #264]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a3c      	ldr	r2, [pc, #240]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ece:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d015      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001edc:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4934      	ldr	r1, [pc, #208]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efa:	d105      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a2e      	ldr	r2, [pc, #184]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d015      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f22:	4926      	ldr	r1, [pc, #152]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f32:	d105      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d015      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	4918      	ldr	r1, [pc, #96]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d015      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	490a      	ldr	r1, [pc, #40]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001fb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e049      	b.n	8002066 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f841 	bl	800206e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fa1e 	bl	8002440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d001      	beq.n	800209c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e021      	b.n	80020e0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <HAL_TIM_Base_Start_IT+0x68>)
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d00b      	beq.n	80020de <HAL_TIM_Base_Start_IT+0x5a>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020cc:	d007      	beq.n	80020de <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	00010007 	.word	0x00010007

080020f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d122      	bne.n	800214c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d11b      	bne.n	800214c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0202 	mvn.w	r2, #2
 800211c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f965 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f957 	bl	80023ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f968 	bl	8002416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b04      	cmp	r3, #4
 8002158:	d122      	bne.n	80021a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b04      	cmp	r3, #4
 8002166:	d11b      	bne.n	80021a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0204 	mvn.w	r2, #4
 8002170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f93b 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f92d 	bl	80023ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f93e 	bl	8002416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d122      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d11b      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0208 	mvn.w	r2, #8
 80021c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2204      	movs	r2, #4
 80021ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f911 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 80021e0:	e005      	b.n	80021ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f903 	bl	80023ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f914 	bl	8002416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d122      	bne.n	8002248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b10      	cmp	r3, #16
 800220e:	d11b      	bne.n	8002248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0210 	mvn.w	r2, #16
 8002218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2208      	movs	r2, #8
 800221e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8e7 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8d9 	bl	80023ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f8ea 	bl	8002416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d10e      	bne.n	8002274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d107      	bne.n	8002274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0201 	mvn.w	r2, #1
 800226c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fa92 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227e:	2b80      	cmp	r3, #128	; 0x80
 8002280:	d10e      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d107      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f96a 	bl	8002574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ae:	d10e      	bne.n	80022ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d107      	bne.n	80022ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f95d 	bl	8002588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	d10e      	bne.n	80022fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	2b40      	cmp	r3, #64	; 0x40
 80022e8:	d107      	bne.n	80022fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f898 	bl	800242a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b20      	cmp	r3, #32
 8002306:	d10e      	bne.n	8002326 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b20      	cmp	r3, #32
 8002314:	d107      	bne.n	8002326 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f06f 0220 	mvn.w	r2, #32
 800231e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f91d 	bl	8002560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002334:	d10f      	bne.n	8002356 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002344:	d107      	bne.n	8002356 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800234e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f923 	bl	800259c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002364:	d10f      	bne.n	8002386 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002374:	d107      	bne.n	8002386 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800237e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f915 	bl	80025b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002394:	d10f      	bne.n	80023b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a4:	d107      	bne.n	80023b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80023ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f907 	bl	80025c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023c4:	d10f      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023d4:	d107      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80023de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f8f9 	bl	80025d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3c      	ldr	r2, [pc, #240]	; (8002544 <TIM_Base_SetConfig+0x104>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00f      	beq.n	8002478 <TIM_Base_SetConfig+0x38>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245e:	d00b      	beq.n	8002478 <TIM_Base_SetConfig+0x38>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a39      	ldr	r2, [pc, #228]	; (8002548 <TIM_Base_SetConfig+0x108>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <TIM_Base_SetConfig+0x38>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a38      	ldr	r2, [pc, #224]	; (800254c <TIM_Base_SetConfig+0x10c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <TIM_Base_SetConfig+0x38>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a37      	ldr	r2, [pc, #220]	; (8002550 <TIM_Base_SetConfig+0x110>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d108      	bne.n	800248a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a2d      	ldr	r2, [pc, #180]	; (8002544 <TIM_Base_SetConfig+0x104>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01b      	beq.n	80024ca <TIM_Base_SetConfig+0x8a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002498:	d017      	beq.n	80024ca <TIM_Base_SetConfig+0x8a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <TIM_Base_SetConfig+0x108>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <TIM_Base_SetConfig+0x8a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a29      	ldr	r2, [pc, #164]	; (800254c <TIM_Base_SetConfig+0x10c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00f      	beq.n	80024ca <TIM_Base_SetConfig+0x8a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a28      	ldr	r2, [pc, #160]	; (8002550 <TIM_Base_SetConfig+0x110>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_Base_SetConfig+0x8a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <TIM_Base_SetConfig+0x114>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x8a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <TIM_Base_SetConfig+0x118>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x8a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a25      	ldr	r2, [pc, #148]	; (800255c <TIM_Base_SetConfig+0x11c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d108      	bne.n	80024dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <TIM_Base_SetConfig+0x104>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00f      	beq.n	8002528 <TIM_Base_SetConfig+0xe8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a11      	ldr	r2, [pc, #68]	; (8002550 <TIM_Base_SetConfig+0x110>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00b      	beq.n	8002528 <TIM_Base_SetConfig+0xe8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <TIM_Base_SetConfig+0x114>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0xe8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <TIM_Base_SetConfig+0x118>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0xe8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <TIM_Base_SetConfig+0x11c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d103      	bne.n	8002530 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	615a      	str	r2, [r3, #20]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40013400 	.word	0x40013400
 8002554:	40014000 	.word	0x40014000
 8002558:	40014400 	.word	0x40014400
 800255c:	40014800 	.word	0x40014800

08002560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e042      	b.n	8002684 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d106      	bne.n	8002616 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe f915 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2224      	movs	r2, #36	; 0x24
 800261a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f82e 	bl	8002690 <UART_SetConfig>
 8002634:	4603      	mov	r3, r0
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e022      	b.n	8002684 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f001 f9dc 	bl	8003a04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800265a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800266a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f001 fa63 	bl	8003b48 <UART_CheckIdleState>
 8002682:	4603      	mov	r3, r0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	0000      	movs	r0, r0
	...

08002690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002690:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002694:	b08a      	sub	sp, #40	; 0x28
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	4313      	orrs	r3, r2
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4ba4      	ldr	r3, [pc, #656]	; (8002960 <UART_SetConfig+0x2d0>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d8:	430b      	orrs	r3, r1
 80026da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a99      	ldr	r2, [pc, #612]	; (8002964 <UART_SetConfig+0x2d4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d004      	beq.n	800270c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002708:	4313      	orrs	r3, r2
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002716:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002720:	430b      	orrs	r3, r1
 8002722:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	f023 010f 	bic.w	r1, r3, #15
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a8a      	ldr	r2, [pc, #552]	; (8002968 <UART_SetConfig+0x2d8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d126      	bne.n	8002792 <UART_SetConfig+0x102>
 8002744:	4b89      	ldr	r3, [pc, #548]	; (800296c <UART_SetConfig+0x2dc>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b03      	cmp	r3, #3
 8002750:	d81a      	bhi.n	8002788 <UART_SetConfig+0xf8>
 8002752:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <UART_SetConfig+0xc8>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	08002769 	.word	0x08002769
 800275c:	08002779 	.word	0x08002779
 8002760:	08002771 	.word	0x08002771
 8002764:	08002781 	.word	0x08002781
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800276e:	e0d6      	b.n	800291e <UART_SetConfig+0x28e>
 8002770:	2302      	movs	r3, #2
 8002772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002776:	e0d2      	b.n	800291e <UART_SetConfig+0x28e>
 8002778:	2304      	movs	r3, #4
 800277a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800277e:	e0ce      	b.n	800291e <UART_SetConfig+0x28e>
 8002780:	2308      	movs	r3, #8
 8002782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002786:	e0ca      	b.n	800291e <UART_SetConfig+0x28e>
 8002788:	2310      	movs	r3, #16
 800278a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800278e:	bf00      	nop
 8002790:	e0c5      	b.n	800291e <UART_SetConfig+0x28e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a76      	ldr	r2, [pc, #472]	; (8002970 <UART_SetConfig+0x2e0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d138      	bne.n	800280e <UART_SetConfig+0x17e>
 800279c:	4b73      	ldr	r3, [pc, #460]	; (800296c <UART_SetConfig+0x2dc>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d82c      	bhi.n	8002804 <UART_SetConfig+0x174>
 80027aa:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <UART_SetConfig+0x120>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027e5 	.word	0x080027e5
 80027b4:	08002805 	.word	0x08002805
 80027b8:	08002805 	.word	0x08002805
 80027bc:	08002805 	.word	0x08002805
 80027c0:	080027f5 	.word	0x080027f5
 80027c4:	08002805 	.word	0x08002805
 80027c8:	08002805 	.word	0x08002805
 80027cc:	08002805 	.word	0x08002805
 80027d0:	080027ed 	.word	0x080027ed
 80027d4:	08002805 	.word	0x08002805
 80027d8:	08002805 	.word	0x08002805
 80027dc:	08002805 	.word	0x08002805
 80027e0:	080027fd 	.word	0x080027fd
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ea:	e098      	b.n	800291e <UART_SetConfig+0x28e>
 80027ec:	2302      	movs	r3, #2
 80027ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027f2:	e094      	b.n	800291e <UART_SetConfig+0x28e>
 80027f4:	2304      	movs	r3, #4
 80027f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027fa:	e090      	b.n	800291e <UART_SetConfig+0x28e>
 80027fc:	2308      	movs	r3, #8
 80027fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002802:	e08c      	b.n	800291e <UART_SetConfig+0x28e>
 8002804:	2310      	movs	r3, #16
 8002806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800280a:	bf00      	nop
 800280c:	e087      	b.n	800291e <UART_SetConfig+0x28e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <UART_SetConfig+0x2e4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d125      	bne.n	8002864 <UART_SetConfig+0x1d4>
 8002818:	4b54      	ldr	r3, [pc, #336]	; (800296c <UART_SetConfig+0x2dc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002822:	2b10      	cmp	r3, #16
 8002824:	d011      	beq.n	800284a <UART_SetConfig+0x1ba>
 8002826:	2b10      	cmp	r3, #16
 8002828:	d802      	bhi.n	8002830 <UART_SetConfig+0x1a0>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <UART_SetConfig+0x1aa>
 800282e:	e014      	b.n	800285a <UART_SetConfig+0x1ca>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d006      	beq.n	8002842 <UART_SetConfig+0x1b2>
 8002834:	2b30      	cmp	r3, #48	; 0x30
 8002836:	d00c      	beq.n	8002852 <UART_SetConfig+0x1c2>
 8002838:	e00f      	b.n	800285a <UART_SetConfig+0x1ca>
 800283a:	2300      	movs	r3, #0
 800283c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002840:	e06d      	b.n	800291e <UART_SetConfig+0x28e>
 8002842:	2302      	movs	r3, #2
 8002844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002848:	e069      	b.n	800291e <UART_SetConfig+0x28e>
 800284a:	2304      	movs	r3, #4
 800284c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002850:	e065      	b.n	800291e <UART_SetConfig+0x28e>
 8002852:	2308      	movs	r3, #8
 8002854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002858:	e061      	b.n	800291e <UART_SetConfig+0x28e>
 800285a:	2310      	movs	r3, #16
 800285c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002860:	bf00      	nop
 8002862:	e05c      	b.n	800291e <UART_SetConfig+0x28e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a43      	ldr	r2, [pc, #268]	; (8002978 <UART_SetConfig+0x2e8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d125      	bne.n	80028ba <UART_SetConfig+0x22a>
 800286e:	4b3f      	ldr	r3, [pc, #252]	; (800296c <UART_SetConfig+0x2dc>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d011      	beq.n	80028a0 <UART_SetConfig+0x210>
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d802      	bhi.n	8002886 <UART_SetConfig+0x1f6>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <UART_SetConfig+0x200>
 8002884:	e014      	b.n	80028b0 <UART_SetConfig+0x220>
 8002886:	2b80      	cmp	r3, #128	; 0x80
 8002888:	d006      	beq.n	8002898 <UART_SetConfig+0x208>
 800288a:	2bc0      	cmp	r3, #192	; 0xc0
 800288c:	d00c      	beq.n	80028a8 <UART_SetConfig+0x218>
 800288e:	e00f      	b.n	80028b0 <UART_SetConfig+0x220>
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002896:	e042      	b.n	800291e <UART_SetConfig+0x28e>
 8002898:	2302      	movs	r3, #2
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800289e:	e03e      	b.n	800291e <UART_SetConfig+0x28e>
 80028a0:	2304      	movs	r3, #4
 80028a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028a6:	e03a      	b.n	800291e <UART_SetConfig+0x28e>
 80028a8:	2308      	movs	r3, #8
 80028aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ae:	e036      	b.n	800291e <UART_SetConfig+0x28e>
 80028b0:	2310      	movs	r3, #16
 80028b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028b6:	bf00      	nop
 80028b8:	e031      	b.n	800291e <UART_SetConfig+0x28e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a29      	ldr	r2, [pc, #164]	; (8002964 <UART_SetConfig+0x2d4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d129      	bne.n	8002918 <UART_SetConfig+0x288>
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <UART_SetConfig+0x2dc>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d014      	beq.n	80028fe <UART_SetConfig+0x26e>
 80028d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d8:	d802      	bhi.n	80028e0 <UART_SetConfig+0x250>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <UART_SetConfig+0x25e>
 80028de:	e016      	b.n	800290e <UART_SetConfig+0x27e>
 80028e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e4:	d007      	beq.n	80028f6 <UART_SetConfig+0x266>
 80028e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028ea:	d00c      	beq.n	8002906 <UART_SetConfig+0x276>
 80028ec:	e00f      	b.n	800290e <UART_SetConfig+0x27e>
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028f4:	e013      	b.n	800291e <UART_SetConfig+0x28e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028fc:	e00f      	b.n	800291e <UART_SetConfig+0x28e>
 80028fe:	2304      	movs	r3, #4
 8002900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002904:	e00b      	b.n	800291e <UART_SetConfig+0x28e>
 8002906:	2308      	movs	r3, #8
 8002908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290c:	e007      	b.n	800291e <UART_SetConfig+0x28e>
 800290e:	2310      	movs	r3, #16
 8002910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002914:	bf00      	nop
 8002916:	e002      	b.n	800291e <UART_SetConfig+0x28e>
 8002918:	2310      	movs	r3, #16
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a10      	ldr	r2, [pc, #64]	; (8002964 <UART_SetConfig+0x2d4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	f040 842e 	bne.w	8003186 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800292a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800292e:	2b08      	cmp	r3, #8
 8002930:	f200 8169 	bhi.w	8002c06 <UART_SetConfig+0x576>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <UART_SetConfig+0x2ac>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	0800297d 	.word	0x0800297d
 8002940:	08002c07 	.word	0x08002c07
 8002944:	08002a1f 	.word	0x08002a1f
 8002948:	08002c07 	.word	0x08002c07
 800294c:	08002ab7 	.word	0x08002ab7
 8002950:	08002c07 	.word	0x08002c07
 8002954:	08002c07 	.word	0x08002c07
 8002958:	08002c07 	.word	0x08002c07
 800295c:	08002b59 	.word	0x08002b59
 8002960:	cfff69f3 	.word	0xcfff69f3
 8002964:	40008000 	.word	0x40008000
 8002968:	40013800 	.word	0x40013800
 800296c:	40021000 	.word	0x40021000
 8002970:	40004400 	.word	0x40004400
 8002974:	40004800 	.word	0x40004800
 8002978:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800297c:	f7ff f88c 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	2b00      	cmp	r3, #0
 8002988:	d044      	beq.n	8002a14 <UART_SetConfig+0x384>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	2b01      	cmp	r3, #1
 8002990:	d03e      	beq.n	8002a10 <UART_SetConfig+0x380>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	2b02      	cmp	r3, #2
 8002998:	d038      	beq.n	8002a0c <UART_SetConfig+0x37c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d032      	beq.n	8002a08 <UART_SetConfig+0x378>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d02c      	beq.n	8002a04 <UART_SetConfig+0x374>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d026      	beq.n	8002a00 <UART_SetConfig+0x370>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2b06      	cmp	r3, #6
 80029b8:	d020      	beq.n	80029fc <UART_SetConfig+0x36c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2b07      	cmp	r3, #7
 80029c0:	d01a      	beq.n	80029f8 <UART_SetConfig+0x368>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d014      	beq.n	80029f4 <UART_SetConfig+0x364>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d00e      	beq.n	80029f0 <UART_SetConfig+0x360>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	2b0a      	cmp	r3, #10
 80029d8:	d008      	beq.n	80029ec <UART_SetConfig+0x35c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2b0b      	cmp	r3, #11
 80029e0:	d102      	bne.n	80029e8 <UART_SetConfig+0x358>
 80029e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e6:	e016      	b.n	8002a16 <UART_SetConfig+0x386>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e014      	b.n	8002a16 <UART_SetConfig+0x386>
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	e012      	b.n	8002a16 <UART_SetConfig+0x386>
 80029f0:	2340      	movs	r3, #64	; 0x40
 80029f2:	e010      	b.n	8002a16 <UART_SetConfig+0x386>
 80029f4:	2320      	movs	r3, #32
 80029f6:	e00e      	b.n	8002a16 <UART_SetConfig+0x386>
 80029f8:	2310      	movs	r3, #16
 80029fa:	e00c      	b.n	8002a16 <UART_SetConfig+0x386>
 80029fc:	230c      	movs	r3, #12
 80029fe:	e00a      	b.n	8002a16 <UART_SetConfig+0x386>
 8002a00:	230a      	movs	r3, #10
 8002a02:	e008      	b.n	8002a16 <UART_SetConfig+0x386>
 8002a04:	2308      	movs	r3, #8
 8002a06:	e006      	b.n	8002a16 <UART_SetConfig+0x386>
 8002a08:	2306      	movs	r3, #6
 8002a0a:	e004      	b.n	8002a16 <UART_SetConfig+0x386>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	e002      	b.n	8002a16 <UART_SetConfig+0x386>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e000      	b.n	8002a16 <UART_SetConfig+0x386>
 8002a14:	2301      	movs	r3, #1
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	617b      	str	r3, [r7, #20]
        break;
 8002a1c:	e0f6      	b.n	8002c0c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d044      	beq.n	8002ab0 <UART_SetConfig+0x420>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d03e      	beq.n	8002aac <UART_SetConfig+0x41c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d038      	beq.n	8002aa8 <UART_SetConfig+0x418>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d032      	beq.n	8002aa4 <UART_SetConfig+0x414>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d02c      	beq.n	8002aa0 <UART_SetConfig+0x410>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d026      	beq.n	8002a9c <UART_SetConfig+0x40c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d020      	beq.n	8002a98 <UART_SetConfig+0x408>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b07      	cmp	r3, #7
 8002a5c:	d01a      	beq.n	8002a94 <UART_SetConfig+0x404>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d014      	beq.n	8002a90 <UART_SetConfig+0x400>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	d00e      	beq.n	8002a8c <UART_SetConfig+0x3fc>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b0a      	cmp	r3, #10
 8002a74:	d008      	beq.n	8002a88 <UART_SetConfig+0x3f8>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b0b      	cmp	r3, #11
 8002a7c:	d102      	bne.n	8002a84 <UART_SetConfig+0x3f4>
 8002a7e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a82:	e016      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002a84:	4ba1      	ldr	r3, [pc, #644]	; (8002d0c <UART_SetConfig+0x67c>)
 8002a86:	e014      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002a88:	4ba1      	ldr	r3, [pc, #644]	; (8002d10 <UART_SetConfig+0x680>)
 8002a8a:	e012      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002a8c:	4ba1      	ldr	r3, [pc, #644]	; (8002d14 <UART_SetConfig+0x684>)
 8002a8e:	e010      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002a90:	4ba1      	ldr	r3, [pc, #644]	; (8002d18 <UART_SetConfig+0x688>)
 8002a92:	e00e      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002a94:	4ba1      	ldr	r3, [pc, #644]	; (8002d1c <UART_SetConfig+0x68c>)
 8002a96:	e00c      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002a98:	4ba1      	ldr	r3, [pc, #644]	; (8002d20 <UART_SetConfig+0x690>)
 8002a9a:	e00a      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002a9c:	4ba1      	ldr	r3, [pc, #644]	; (8002d24 <UART_SetConfig+0x694>)
 8002a9e:	e008      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002aa0:	4ba1      	ldr	r3, [pc, #644]	; (8002d28 <UART_SetConfig+0x698>)
 8002aa2:	e006      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002aa4:	4ba1      	ldr	r3, [pc, #644]	; (8002d2c <UART_SetConfig+0x69c>)
 8002aa6:	e004      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002aa8:	4ba1      	ldr	r3, [pc, #644]	; (8002d30 <UART_SetConfig+0x6a0>)
 8002aaa:	e002      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002aac:	4ba1      	ldr	r3, [pc, #644]	; (8002d34 <UART_SetConfig+0x6a4>)
 8002aae:	e000      	b.n	8002ab2 <UART_SetConfig+0x422>
 8002ab0:	4b96      	ldr	r3, [pc, #600]	; (8002d0c <UART_SetConfig+0x67c>)
 8002ab2:	617b      	str	r3, [r7, #20]
        break;
 8002ab4:	e0aa      	b.n	8002c0c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ab6:	f7fe ff81 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d044      	beq.n	8002b4e <UART_SetConfig+0x4be>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d03e      	beq.n	8002b4a <UART_SetConfig+0x4ba>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d038      	beq.n	8002b46 <UART_SetConfig+0x4b6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d032      	beq.n	8002b42 <UART_SetConfig+0x4b2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d02c      	beq.n	8002b3e <UART_SetConfig+0x4ae>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d026      	beq.n	8002b3a <UART_SetConfig+0x4aa>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d020      	beq.n	8002b36 <UART_SetConfig+0x4a6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2b07      	cmp	r3, #7
 8002afa:	d01a      	beq.n	8002b32 <UART_SetConfig+0x4a2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d014      	beq.n	8002b2e <UART_SetConfig+0x49e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d00e      	beq.n	8002b2a <UART_SetConfig+0x49a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	2b0a      	cmp	r3, #10
 8002b12:	d008      	beq.n	8002b26 <UART_SetConfig+0x496>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2b0b      	cmp	r3, #11
 8002b1a:	d102      	bne.n	8002b22 <UART_SetConfig+0x492>
 8002b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b20:	e016      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e014      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	e012      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b2a:	2340      	movs	r3, #64	; 0x40
 8002b2c:	e010      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b2e:	2320      	movs	r3, #32
 8002b30:	e00e      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b32:	2310      	movs	r3, #16
 8002b34:	e00c      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b36:	230c      	movs	r3, #12
 8002b38:	e00a      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	e008      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b3e:	2308      	movs	r3, #8
 8002b40:	e006      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b42:	2306      	movs	r3, #6
 8002b44:	e004      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b46:	2304      	movs	r3, #4
 8002b48:	e002      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e000      	b.n	8002b50 <UART_SetConfig+0x4c0>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
        break;
 8002b56:	e059      	b.n	8002c0c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d04e      	beq.n	8002bfe <UART_SetConfig+0x56e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d047      	beq.n	8002bf8 <UART_SetConfig+0x568>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d040      	beq.n	8002bf2 <UART_SetConfig+0x562>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d039      	beq.n	8002bec <UART_SetConfig+0x55c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d032      	beq.n	8002be6 <UART_SetConfig+0x556>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d02b      	beq.n	8002be0 <UART_SetConfig+0x550>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	2b06      	cmp	r3, #6
 8002b8e:	d024      	beq.n	8002bda <UART_SetConfig+0x54a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2b07      	cmp	r3, #7
 8002b96:	d01d      	beq.n	8002bd4 <UART_SetConfig+0x544>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d016      	beq.n	8002bce <UART_SetConfig+0x53e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	d00f      	beq.n	8002bc8 <UART_SetConfig+0x538>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2b0a      	cmp	r3, #10
 8002bae:	d008      	beq.n	8002bc2 <UART_SetConfig+0x532>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	2b0b      	cmp	r3, #11
 8002bb6:	d101      	bne.n	8002bbc <UART_SetConfig+0x52c>
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	e022      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc0:	e01f      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc6:	e01c      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bcc:	e019      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd2:	e016      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bd8:	e013      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bda:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002bde:	e010      	b.n	8002c02 <UART_SetConfig+0x572>
 8002be0:	f640 43cc 	movw	r3, #3276	; 0xccc
 8002be4:	e00d      	b.n	8002c02 <UART_SetConfig+0x572>
 8002be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bea:	e00a      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bec:	f241 5355 	movw	r3, #5461	; 0x1555
 8002bf0:	e007      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf6:	e004      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bfc:	e001      	b.n	8002c02 <UART_SetConfig+0x572>
 8002bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c02:	617b      	str	r3, [r7, #20]
        break;
 8002c04:	e002      	b.n	8002c0c <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	76fb      	strb	r3, [r7, #27]
        break;
 8002c0a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 86cd 	beq.w	80039ae <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d305      	bcc.n	8002c30 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d903      	bls.n	8002c38 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	76fb      	strb	r3, [r7, #27]
 8002c34:	f000 bebb 	b.w	80039ae <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8002c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	f200 828d 	bhi.w	800315c <UART_SetConfig+0xacc>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <UART_SetConfig+0x5b8>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c6d 	.word	0x08002c6d
 8002c4c:	0800315d 	.word	0x0800315d
 8002c50:	08002dd7 	.word	0x08002dd7
 8002c54:	0800315d 	.word	0x0800315d
 8002c58:	08002ecd 	.word	0x08002ecd
 8002c5c:	0800315d 	.word	0x0800315d
 8002c60:	0800315d 	.word	0x0800315d
 8002c64:	0800315d 	.word	0x0800315d
 8002c68:	0800300b 	.word	0x0800300b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f7fe ff14 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8002c70:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f04f 0100 	mov.w	r1, #0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07d      	beq.n	8002d7e <UART_SetConfig+0x6ee>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d074      	beq.n	8002d74 <UART_SetConfig+0x6e4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d06b      	beq.n	8002d6a <UART_SetConfig+0x6da>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d062      	beq.n	8002d60 <UART_SetConfig+0x6d0>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d059      	beq.n	8002d56 <UART_SetConfig+0x6c6>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d050      	beq.n	8002d4c <UART_SetConfig+0x6bc>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d047      	beq.n	8002d42 <UART_SetConfig+0x6b2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d03e      	beq.n	8002d38 <UART_SetConfig+0x6a8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d01f      	beq.n	8002d02 <UART_SetConfig+0x672>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b09      	cmp	r3, #9
 8002cc8:	d016      	beq.n	8002cf8 <UART_SetConfig+0x668>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b0a      	cmp	r3, #10
 8002cd0:	d00d      	beq.n	8002cee <UART_SetConfig+0x65e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b0b      	cmp	r3, #11
 8002cd8:	d104      	bne.n	8002ce4 <UART_SetConfig+0x654>
 8002cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cde:	f04f 0400 	mov.w	r4, #0
 8002ce2:	e050      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002ce4:	f04f 0301 	mov.w	r3, #1
 8002ce8:	f04f 0400 	mov.w	r4, #0
 8002cec:	e04b      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002cee:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002cf2:	f04f 0400 	mov.w	r4, #0
 8002cf6:	e046      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002cf8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	e041      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002d02:	f04f 0320 	mov.w	r3, #32
 8002d06:	f04f 0400 	mov.w	r4, #0
 8002d0a:	e03c      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	0001e848 	.word	0x0001e848
 8002d14:	0003d090 	.word	0x0003d090
 8002d18:	0007a120 	.word	0x0007a120
 8002d1c:	000f4240 	.word	0x000f4240
 8002d20:	00145855 	.word	0x00145855
 8002d24:	00186a00 	.word	0x00186a00
 8002d28:	001e8480 	.word	0x001e8480
 8002d2c:	0028b0aa 	.word	0x0028b0aa
 8002d30:	003d0900 	.word	0x003d0900
 8002d34:	007a1200 	.word	0x007a1200
 8002d38:	f04f 0310 	mov.w	r3, #16
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	e021      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002d42:	f04f 030c 	mov.w	r3, #12
 8002d46:	f04f 0400 	mov.w	r4, #0
 8002d4a:	e01c      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002d4c:	f04f 030a 	mov.w	r3, #10
 8002d50:	f04f 0400 	mov.w	r4, #0
 8002d54:	e017      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002d56:	f04f 0308 	mov.w	r3, #8
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	e012      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002d60:	f04f 0306 	mov.w	r3, #6
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	e00d      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002d6a:	f04f 0304 	mov.w	r3, #4
 8002d6e:	f04f 0400 	mov.w	r4, #0
 8002d72:	e008      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002d74:	f04f 0302 	mov.w	r3, #2
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	e003      	b.n	8002d86 <UART_SetConfig+0x6f6>
 8002d7e:	f04f 0301 	mov.w	r3, #1
 8002d82:	f04f 0400 	mov.w	r4, #0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4623      	mov	r3, r4
 8002d8a:	f7fd fa49 	bl	8000220 <__aeabi_uldivmod>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	4619      	mov	r1, r3
 8002d94:	4622      	mov	r2, r4
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	f04f 0400 	mov.w	r4, #0
 8002d9e:	0214      	lsls	r4, r2, #8
 8002da0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002da4:	020b      	lsls	r3, r1, #8
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6852      	ldr	r2, [r2, #4]
 8002daa:	0852      	lsrs	r2, r2, #1
 8002dac:	4611      	mov	r1, r2
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	eb13 0b01 	adds.w	fp, r3, r1
 8002db6:	eb44 0c02 	adc.w	ip, r4, r2
 8002dba:	4658      	mov	r0, fp
 8002dbc:	4661      	mov	r1, ip
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f04f 0400 	mov.w	r4, #0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4623      	mov	r3, r4
 8002dca:	f7fd fa29 	bl	8000220 <__aeabi_uldivmod>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	61fb      	str	r3, [r7, #28]
            break;
 8002dd4:	e1c5      	b.n	8003162 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d05b      	beq.n	8002e96 <UART_SetConfig+0x806>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d053      	beq.n	8002e8e <UART_SetConfig+0x7fe>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d04b      	beq.n	8002e86 <UART_SetConfig+0x7f6>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d043      	beq.n	8002e7e <UART_SetConfig+0x7ee>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d03b      	beq.n	8002e76 <UART_SetConfig+0x7e6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d033      	beq.n	8002e6e <UART_SetConfig+0x7de>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d02b      	beq.n	8002e66 <UART_SetConfig+0x7d6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2b07      	cmp	r3, #7
 8002e14:	d023      	beq.n	8002e5e <UART_SetConfig+0x7ce>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d01b      	beq.n	8002e56 <UART_SetConfig+0x7c6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2b09      	cmp	r3, #9
 8002e24:	d013      	beq.n	8002e4e <UART_SetConfig+0x7be>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2b0a      	cmp	r3, #10
 8002e2c:	d00b      	beq.n	8002e46 <UART_SetConfig+0x7b6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	2b0b      	cmp	r3, #11
 8002e34:	d103      	bne.n	8002e3e <UART_SetConfig+0x7ae>
 8002e36:	4bae      	ldr	r3, [pc, #696]	; (80030f0 <UART_SetConfig+0xa60>)
 8002e38:	f04f 0400 	mov.w	r4, #0
 8002e3c:	e02e      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e3e:	4bad      	ldr	r3, [pc, #692]	; (80030f4 <UART_SetConfig+0xa64>)
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	e02a      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e46:	4bac      	ldr	r3, [pc, #688]	; (80030f8 <UART_SetConfig+0xa68>)
 8002e48:	f04f 0400 	mov.w	r4, #0
 8002e4c:	e026      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e4e:	4bab      	ldr	r3, [pc, #684]	; (80030fc <UART_SetConfig+0xa6c>)
 8002e50:	f04f 0400 	mov.w	r4, #0
 8002e54:	e022      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e56:	4baa      	ldr	r3, [pc, #680]	; (8003100 <UART_SetConfig+0xa70>)
 8002e58:	f04f 0400 	mov.w	r4, #0
 8002e5c:	e01e      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e5e:	4ba9      	ldr	r3, [pc, #676]	; (8003104 <UART_SetConfig+0xa74>)
 8002e60:	f04f 0400 	mov.w	r4, #0
 8002e64:	e01a      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e66:	a49e      	add	r4, pc, #632	; (adr r4, 80030e0 <UART_SetConfig+0xa50>)
 8002e68:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002e6c:	e016      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e6e:	4ba6      	ldr	r3, [pc, #664]	; (8003108 <UART_SetConfig+0xa78>)
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	e012      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e76:	4ba5      	ldr	r3, [pc, #660]	; (800310c <UART_SetConfig+0xa7c>)
 8002e78:	f04f 0400 	mov.w	r4, #0
 8002e7c:	e00e      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e7e:	a49a      	add	r4, pc, #616	; (adr r4, 80030e8 <UART_SetConfig+0xa58>)
 8002e80:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002e84:	e00a      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e86:	4ba2      	ldr	r3, [pc, #648]	; (8003110 <UART_SetConfig+0xa80>)
 8002e88:	f04f 0400 	mov.w	r4, #0
 8002e8c:	e006      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e8e:	4ba1      	ldr	r3, [pc, #644]	; (8003114 <UART_SetConfig+0xa84>)
 8002e90:	f04f 0400 	mov.w	r4, #0
 8002e94:	e002      	b.n	8002e9c <UART_SetConfig+0x80c>
 8002e96:	4b97      	ldr	r3, [pc, #604]	; (80030f4 <UART_SetConfig+0xa64>)
 8002e98:	f04f 0400 	mov.w	r4, #0
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6852      	ldr	r2, [r2, #4]
 8002ea0:	0852      	lsrs	r2, r2, #1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	eb13 0b01 	adds.w	fp, r3, r1
 8002eac:	eb44 0c02 	adc.w	ip, r4, r2
 8002eb0:	4658      	mov	r0, fp
 8002eb2:	4661      	mov	r1, ip
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	f7fd f9ae 	bl	8000220 <__aeabi_uldivmod>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	61fb      	str	r3, [r7, #28]
            break;
 8002eca:	e14a      	b.n	8003162 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002ecc:	f7fe fd76 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 8002ed0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d067      	beq.n	8002fb2 <UART_SetConfig+0x922>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d05e      	beq.n	8002fa8 <UART_SetConfig+0x918>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d055      	beq.n	8002f9e <UART_SetConfig+0x90e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d04c      	beq.n	8002f94 <UART_SetConfig+0x904>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d043      	beq.n	8002f8a <UART_SetConfig+0x8fa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d03a      	beq.n	8002f80 <UART_SetConfig+0x8f0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d031      	beq.n	8002f76 <UART_SetConfig+0x8e6>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	d028      	beq.n	8002f6c <UART_SetConfig+0x8dc>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d01f      	beq.n	8002f62 <UART_SetConfig+0x8d2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b09      	cmp	r3, #9
 8002f28:	d016      	beq.n	8002f58 <UART_SetConfig+0x8c8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b0a      	cmp	r3, #10
 8002f30:	d00d      	beq.n	8002f4e <UART_SetConfig+0x8be>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b0b      	cmp	r3, #11
 8002f38:	d104      	bne.n	8002f44 <UART_SetConfig+0x8b4>
 8002f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3e:	f04f 0400 	mov.w	r4, #0
 8002f42:	e03a      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f44:	f04f 0301 	mov.w	r3, #1
 8002f48:	f04f 0400 	mov.w	r4, #0
 8002f4c:	e035      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f4e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002f52:	f04f 0400 	mov.w	r4, #0
 8002f56:	e030      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f58:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	e02b      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f62:	f04f 0320 	mov.w	r3, #32
 8002f66:	f04f 0400 	mov.w	r4, #0
 8002f6a:	e026      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f6c:	f04f 0310 	mov.w	r3, #16
 8002f70:	f04f 0400 	mov.w	r4, #0
 8002f74:	e021      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f76:	f04f 030c 	mov.w	r3, #12
 8002f7a:	f04f 0400 	mov.w	r4, #0
 8002f7e:	e01c      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f80:	f04f 030a 	mov.w	r3, #10
 8002f84:	f04f 0400 	mov.w	r4, #0
 8002f88:	e017      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f8a:	f04f 0308 	mov.w	r3, #8
 8002f8e:	f04f 0400 	mov.w	r4, #0
 8002f92:	e012      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f94:	f04f 0306 	mov.w	r3, #6
 8002f98:	f04f 0400 	mov.w	r4, #0
 8002f9c:	e00d      	b.n	8002fba <UART_SetConfig+0x92a>
 8002f9e:	f04f 0304 	mov.w	r3, #4
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	e008      	b.n	8002fba <UART_SetConfig+0x92a>
 8002fa8:	f04f 0302 	mov.w	r3, #2
 8002fac:	f04f 0400 	mov.w	r4, #0
 8002fb0:	e003      	b.n	8002fba <UART_SetConfig+0x92a>
 8002fb2:	f04f 0301 	mov.w	r3, #1
 8002fb6:	f04f 0400 	mov.w	r4, #0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	f7fd f92f 	bl	8000220 <__aeabi_uldivmod>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4622      	mov	r2, r4
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	f04f 0400 	mov.w	r4, #0
 8002fd2:	0214      	lsls	r4, r2, #8
 8002fd4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002fd8:	020b      	lsls	r3, r1, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6852      	ldr	r2, [r2, #4]
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	eb13 0b01 	adds.w	fp, r3, r1
 8002fea:	eb44 0c02 	adc.w	ip, r4, r2
 8002fee:	4658      	mov	r0, fp
 8002ff0:	4661      	mov	r1, ip
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f04f 0400 	mov.w	r4, #0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4623      	mov	r3, r4
 8002ffe:	f7fd f90f 	bl	8000220 <__aeabi_uldivmod>
 8003002:	4603      	mov	r3, r0
 8003004:	460c      	mov	r4, r1
 8003006:	61fb      	str	r3, [r7, #28]
            break;
 8003008:	e0ab      	b.n	8003162 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8088 	beq.w	8003124 <UART_SetConfig+0xa94>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	2b01      	cmp	r3, #1
 800301a:	d05b      	beq.n	80030d4 <UART_SetConfig+0xa44>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	2b02      	cmp	r3, #2
 8003022:	d052      	beq.n	80030ca <UART_SetConfig+0xa3a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2b03      	cmp	r3, #3
 800302a:	d04a      	beq.n	80030c2 <UART_SetConfig+0xa32>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b04      	cmp	r3, #4
 8003032:	d041      	beq.n	80030b8 <UART_SetConfig+0xa28>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2b05      	cmp	r3, #5
 800303a:	d039      	beq.n	80030b0 <UART_SetConfig+0xa20>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	2b06      	cmp	r3, #6
 8003042:	d031      	beq.n	80030a8 <UART_SetConfig+0xa18>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b07      	cmp	r3, #7
 800304a:	d028      	beq.n	800309e <UART_SetConfig+0xa0e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2b08      	cmp	r3, #8
 8003052:	d01f      	beq.n	8003094 <UART_SetConfig+0xa04>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b09      	cmp	r3, #9
 800305a:	d016      	beq.n	800308a <UART_SetConfig+0x9fa>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b0a      	cmp	r3, #10
 8003062:	d00d      	beq.n	8003080 <UART_SetConfig+0x9f0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b0b      	cmp	r3, #11
 800306a:	d104      	bne.n	8003076 <UART_SetConfig+0x9e6>
 800306c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003070:	f04f 0400 	mov.w	r4, #0
 8003074:	e05a      	b.n	800312c <UART_SetConfig+0xa9c>
 8003076:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800307a:	f04f 0400 	mov.w	r4, #0
 800307e:	e055      	b.n	800312c <UART_SetConfig+0xa9c>
 8003080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003084:	f04f 0400 	mov.w	r4, #0
 8003088:	e050      	b.n	800312c <UART_SetConfig+0xa9c>
 800308a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308e:	f04f 0400 	mov.w	r4, #0
 8003092:	e04b      	b.n	800312c <UART_SetConfig+0xa9c>
 8003094:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003098:	f04f 0400 	mov.w	r4, #0
 800309c:	e046      	b.n	800312c <UART_SetConfig+0xa9c>
 800309e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030a2:	f04f 0400 	mov.w	r4, #0
 80030a6:	e041      	b.n	800312c <UART_SetConfig+0xa9c>
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <UART_SetConfig+0xa88>)
 80030aa:	f04f 0400 	mov.w	r4, #0
 80030ae:	e03d      	b.n	800312c <UART_SetConfig+0xa9c>
 80030b0:	4b1a      	ldr	r3, [pc, #104]	; (800311c <UART_SetConfig+0xa8c>)
 80030b2:	f04f 0400 	mov.w	r4, #0
 80030b6:	e039      	b.n	800312c <UART_SetConfig+0xa9c>
 80030b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	e034      	b.n	800312c <UART_SetConfig+0xa9c>
 80030c2:	4b17      	ldr	r3, [pc, #92]	; (8003120 <UART_SetConfig+0xa90>)
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	e030      	b.n	800312c <UART_SetConfig+0xa9c>
 80030ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030ce:	f04f 0400 	mov.w	r4, #0
 80030d2:	e02b      	b.n	800312c <UART_SetConfig+0xa9c>
 80030d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030d8:	f04f 0400 	mov.w	r4, #0
 80030dc:	e026      	b.n	800312c <UART_SetConfig+0xa9c>
 80030de:	bf00      	nop
 80030e0:	14585500 	.word	0x14585500
 80030e4:	00000000 	.word	0x00000000
 80030e8:	28b0aa00 	.word	0x28b0aa00
 80030ec:	00000000 	.word	0x00000000
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	f4240000 	.word	0xf4240000
 80030f8:	01e84800 	.word	0x01e84800
 80030fc:	03d09000 	.word	0x03d09000
 8003100:	07a12000 	.word	0x07a12000
 8003104:	0f424000 	.word	0x0f424000
 8003108:	186a0000 	.word	0x186a0000
 800310c:	1e848000 	.word	0x1e848000
 8003110:	3d090000 	.word	0x3d090000
 8003114:	7a120000 	.word	0x7a120000
 8003118:	000aaa00 	.word	0x000aaa00
 800311c:	000ccc00 	.word	0x000ccc00
 8003120:	00155500 	.word	0x00155500
 8003124:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6852      	ldr	r2, [r2, #4]
 8003130:	0852      	lsrs	r2, r2, #1
 8003132:	4611      	mov	r1, r2
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	eb13 0b01 	adds.w	fp, r3, r1
 800313c:	eb44 0c02 	adc.w	ip, r4, r2
 8003140:	4658      	mov	r0, fp
 8003142:	4661      	mov	r1, ip
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	461a      	mov	r2, r3
 800314e:	4623      	mov	r3, r4
 8003150:	f7fd f866 	bl	8000220 <__aeabi_uldivmod>
 8003154:	4603      	mov	r3, r0
 8003156:	460c      	mov	r4, r1
 8003158:	61fb      	str	r3, [r7, #28]
            break;
 800315a:	e002      	b.n	8003162 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	76fb      	strb	r3, [r7, #27]
            break;
 8003160:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003168:	d309      	bcc.n	800317e <UART_SetConfig+0xaee>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003170:	d205      	bcs.n	800317e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	f000 bc18 	b.w	80039ae <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	76fb      	strb	r3, [r7, #27]
 8003182:	f000 bc14 	b.w	80039ae <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318e:	f040 8204 	bne.w	800359a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8003192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003196:	2b08      	cmp	r3, #8
 8003198:	f200 81df 	bhi.w	800355a <UART_SetConfig+0xeca>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <UART_SetConfig+0xb14>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	08003281 	.word	0x08003281
 80031ac:	08003339 	.word	0x08003339
 80031b0:	0800355b 	.word	0x0800355b
 80031b4:	080033e1 	.word	0x080033e1
 80031b8:	0800355b 	.word	0x0800355b
 80031bc:	0800355b 	.word	0x0800355b
 80031c0:	0800355b 	.word	0x0800355b
 80031c4:	08003499 	.word	0x08003499
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7fe fc66 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 80031cc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d044      	beq.n	8003260 <UART_SetConfig+0xbd0>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d03e      	beq.n	800325c <UART_SetConfig+0xbcc>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d038      	beq.n	8003258 <UART_SetConfig+0xbc8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d032      	beq.n	8003254 <UART_SetConfig+0xbc4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d02c      	beq.n	8003250 <UART_SetConfig+0xbc0>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b05      	cmp	r3, #5
 80031fc:	d026      	beq.n	800324c <UART_SetConfig+0xbbc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2b06      	cmp	r3, #6
 8003204:	d020      	beq.n	8003248 <UART_SetConfig+0xbb8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b07      	cmp	r3, #7
 800320c:	d01a      	beq.n	8003244 <UART_SetConfig+0xbb4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b08      	cmp	r3, #8
 8003214:	d014      	beq.n	8003240 <UART_SetConfig+0xbb0>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b09      	cmp	r3, #9
 800321c:	d00e      	beq.n	800323c <UART_SetConfig+0xbac>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b0a      	cmp	r3, #10
 8003224:	d008      	beq.n	8003238 <UART_SetConfig+0xba8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2b0b      	cmp	r3, #11
 800322c:	d102      	bne.n	8003234 <UART_SetConfig+0xba4>
 800322e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003232:	e016      	b.n	8003262 <UART_SetConfig+0xbd2>
 8003234:	2301      	movs	r3, #1
 8003236:	e014      	b.n	8003262 <UART_SetConfig+0xbd2>
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	e012      	b.n	8003262 <UART_SetConfig+0xbd2>
 800323c:	2340      	movs	r3, #64	; 0x40
 800323e:	e010      	b.n	8003262 <UART_SetConfig+0xbd2>
 8003240:	2320      	movs	r3, #32
 8003242:	e00e      	b.n	8003262 <UART_SetConfig+0xbd2>
 8003244:	2310      	movs	r3, #16
 8003246:	e00c      	b.n	8003262 <UART_SetConfig+0xbd2>
 8003248:	230c      	movs	r3, #12
 800324a:	e00a      	b.n	8003262 <UART_SetConfig+0xbd2>
 800324c:	230a      	movs	r3, #10
 800324e:	e008      	b.n	8003262 <UART_SetConfig+0xbd2>
 8003250:	2308      	movs	r3, #8
 8003252:	e006      	b.n	8003262 <UART_SetConfig+0xbd2>
 8003254:	2306      	movs	r3, #6
 8003256:	e004      	b.n	8003262 <UART_SetConfig+0xbd2>
 8003258:	2304      	movs	r3, #4
 800325a:	e002      	b.n	8003262 <UART_SetConfig+0xbd2>
 800325c:	2302      	movs	r3, #2
 800325e:	e000      	b.n	8003262 <UART_SetConfig+0xbd2>
 8003260:	2301      	movs	r3, #1
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	005a      	lsls	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	b29b      	uxth	r3, r3
 800327c:	61fb      	str	r3, [r7, #28]
        break;
 800327e:	e16f      	b.n	8003560 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7fe fc20 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8003284:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <UART_SetConfig+0xc88>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b01      	cmp	r3, #1
 8003294:	d03e      	beq.n	8003314 <UART_SetConfig+0xc84>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b02      	cmp	r3, #2
 800329c:	d038      	beq.n	8003310 <UART_SetConfig+0xc80>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d032      	beq.n	800330c <UART_SetConfig+0xc7c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d02c      	beq.n	8003308 <UART_SetConfig+0xc78>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	d026      	beq.n	8003304 <UART_SetConfig+0xc74>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d020      	beq.n	8003300 <UART_SetConfig+0xc70>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b07      	cmp	r3, #7
 80032c4:	d01a      	beq.n	80032fc <UART_SetConfig+0xc6c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d014      	beq.n	80032f8 <UART_SetConfig+0xc68>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	d00e      	beq.n	80032f4 <UART_SetConfig+0xc64>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2b0a      	cmp	r3, #10
 80032dc:	d008      	beq.n	80032f0 <UART_SetConfig+0xc60>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b0b      	cmp	r3, #11
 80032e4:	d102      	bne.n	80032ec <UART_SetConfig+0xc5c>
 80032e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ea:	e016      	b.n	800331a <UART_SetConfig+0xc8a>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e014      	b.n	800331a <UART_SetConfig+0xc8a>
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	e012      	b.n	800331a <UART_SetConfig+0xc8a>
 80032f4:	2340      	movs	r3, #64	; 0x40
 80032f6:	e010      	b.n	800331a <UART_SetConfig+0xc8a>
 80032f8:	2320      	movs	r3, #32
 80032fa:	e00e      	b.n	800331a <UART_SetConfig+0xc8a>
 80032fc:	2310      	movs	r3, #16
 80032fe:	e00c      	b.n	800331a <UART_SetConfig+0xc8a>
 8003300:	230c      	movs	r3, #12
 8003302:	e00a      	b.n	800331a <UART_SetConfig+0xc8a>
 8003304:	230a      	movs	r3, #10
 8003306:	e008      	b.n	800331a <UART_SetConfig+0xc8a>
 8003308:	2308      	movs	r3, #8
 800330a:	e006      	b.n	800331a <UART_SetConfig+0xc8a>
 800330c:	2306      	movs	r3, #6
 800330e:	e004      	b.n	800331a <UART_SetConfig+0xc8a>
 8003310:	2304      	movs	r3, #4
 8003312:	e002      	b.n	800331a <UART_SetConfig+0xc8a>
 8003314:	2302      	movs	r3, #2
 8003316:	e000      	b.n	800331a <UART_SetConfig+0xc8a>
 8003318:	2301      	movs	r3, #1
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	005a      	lsls	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	b29b      	uxth	r3, r3
 8003334:	61fb      	str	r3, [r7, #28]
        break;
 8003336:	e113      	b.n	8003560 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d043      	beq.n	80033c8 <UART_SetConfig+0xd38>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	2b01      	cmp	r3, #1
 8003346:	d03d      	beq.n	80033c4 <UART_SetConfig+0xd34>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2b02      	cmp	r3, #2
 800334e:	d037      	beq.n	80033c0 <UART_SetConfig+0xd30>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2b03      	cmp	r3, #3
 8003356:	d031      	beq.n	80033bc <UART_SetConfig+0xd2c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	2b04      	cmp	r3, #4
 800335e:	d02b      	beq.n	80033b8 <UART_SetConfig+0xd28>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2b05      	cmp	r3, #5
 8003366:	d025      	beq.n	80033b4 <UART_SetConfig+0xd24>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2b06      	cmp	r3, #6
 800336e:	d01f      	beq.n	80033b0 <UART_SetConfig+0xd20>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2b07      	cmp	r3, #7
 8003376:	d019      	beq.n	80033ac <UART_SetConfig+0xd1c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2b08      	cmp	r3, #8
 800337e:	d013      	beq.n	80033a8 <UART_SetConfig+0xd18>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	2b09      	cmp	r3, #9
 8003386:	d00d      	beq.n	80033a4 <UART_SetConfig+0xd14>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2b0a      	cmp	r3, #10
 800338e:	d007      	beq.n	80033a0 <UART_SetConfig+0xd10>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2b0b      	cmp	r3, #11
 8003396:	d101      	bne.n	800339c <UART_SetConfig+0xd0c>
 8003398:	4b8d      	ldr	r3, [pc, #564]	; (80035d0 <UART_SetConfig+0xf40>)
 800339a:	e016      	b.n	80033ca <UART_SetConfig+0xd3a>
 800339c:	4b8d      	ldr	r3, [pc, #564]	; (80035d4 <UART_SetConfig+0xf44>)
 800339e:	e014      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033a0:	4b8d      	ldr	r3, [pc, #564]	; (80035d8 <UART_SetConfig+0xf48>)
 80033a2:	e012      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033a4:	4b8d      	ldr	r3, [pc, #564]	; (80035dc <UART_SetConfig+0xf4c>)
 80033a6:	e010      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033a8:	4b8d      	ldr	r3, [pc, #564]	; (80035e0 <UART_SetConfig+0xf50>)
 80033aa:	e00e      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033ac:	4b8d      	ldr	r3, [pc, #564]	; (80035e4 <UART_SetConfig+0xf54>)
 80033ae:	e00c      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033b0:	4b8d      	ldr	r3, [pc, #564]	; (80035e8 <UART_SetConfig+0xf58>)
 80033b2:	e00a      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033b4:	4b8d      	ldr	r3, [pc, #564]	; (80035ec <UART_SetConfig+0xf5c>)
 80033b6:	e008      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033b8:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <UART_SetConfig+0xf60>)
 80033ba:	e006      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033bc:	4b8d      	ldr	r3, [pc, #564]	; (80035f4 <UART_SetConfig+0xf64>)
 80033be:	e004      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033c0:	4b8d      	ldr	r3, [pc, #564]	; (80035f8 <UART_SetConfig+0xf68>)
 80033c2:	e002      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033c4:	4b8d      	ldr	r3, [pc, #564]	; (80035fc <UART_SetConfig+0xf6c>)
 80033c6:	e000      	b.n	80033ca <UART_SetConfig+0xd3a>
 80033c8:	4b82      	ldr	r3, [pc, #520]	; (80035d4 <UART_SetConfig+0xf44>)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6852      	ldr	r2, [r2, #4]
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	441a      	add	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	b29b      	uxth	r3, r3
 80033dc:	61fb      	str	r3, [r7, #28]
        break;
 80033de:	e0bf      	b.n	8003560 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e0:	f7fe faec 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 80033e4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d044      	beq.n	8003478 <UART_SetConfig+0xde8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d03e      	beq.n	8003474 <UART_SetConfig+0xde4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d038      	beq.n	8003470 <UART_SetConfig+0xde0>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b03      	cmp	r3, #3
 8003404:	d032      	beq.n	800346c <UART_SetConfig+0xddc>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b04      	cmp	r3, #4
 800340c:	d02c      	beq.n	8003468 <UART_SetConfig+0xdd8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2b05      	cmp	r3, #5
 8003414:	d026      	beq.n	8003464 <UART_SetConfig+0xdd4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b06      	cmp	r3, #6
 800341c:	d020      	beq.n	8003460 <UART_SetConfig+0xdd0>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b07      	cmp	r3, #7
 8003424:	d01a      	beq.n	800345c <UART_SetConfig+0xdcc>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	2b08      	cmp	r3, #8
 800342c:	d014      	beq.n	8003458 <UART_SetConfig+0xdc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b09      	cmp	r3, #9
 8003434:	d00e      	beq.n	8003454 <UART_SetConfig+0xdc4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2b0a      	cmp	r3, #10
 800343c:	d008      	beq.n	8003450 <UART_SetConfig+0xdc0>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b0b      	cmp	r3, #11
 8003444:	d102      	bne.n	800344c <UART_SetConfig+0xdbc>
 8003446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800344a:	e016      	b.n	800347a <UART_SetConfig+0xdea>
 800344c:	2301      	movs	r3, #1
 800344e:	e014      	b.n	800347a <UART_SetConfig+0xdea>
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	e012      	b.n	800347a <UART_SetConfig+0xdea>
 8003454:	2340      	movs	r3, #64	; 0x40
 8003456:	e010      	b.n	800347a <UART_SetConfig+0xdea>
 8003458:	2320      	movs	r3, #32
 800345a:	e00e      	b.n	800347a <UART_SetConfig+0xdea>
 800345c:	2310      	movs	r3, #16
 800345e:	e00c      	b.n	800347a <UART_SetConfig+0xdea>
 8003460:	230c      	movs	r3, #12
 8003462:	e00a      	b.n	800347a <UART_SetConfig+0xdea>
 8003464:	230a      	movs	r3, #10
 8003466:	e008      	b.n	800347a <UART_SetConfig+0xdea>
 8003468:	2308      	movs	r3, #8
 800346a:	e006      	b.n	800347a <UART_SetConfig+0xdea>
 800346c:	2306      	movs	r3, #6
 800346e:	e004      	b.n	800347a <UART_SetConfig+0xdea>
 8003470:	2304      	movs	r3, #4
 8003472:	e002      	b.n	800347a <UART_SetConfig+0xdea>
 8003474:	2302      	movs	r3, #2
 8003476:	e000      	b.n	800347a <UART_SetConfig+0xdea>
 8003478:	2301      	movs	r3, #1
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	005a      	lsls	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	b29b      	uxth	r3, r3
 8003494:	61fb      	str	r3, [r7, #28]
        break;
 8003496:	e063      	b.n	8003560 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2b00      	cmp	r3, #0
 800349e:	d04f      	beq.n	8003540 <UART_SetConfig+0xeb0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d048      	beq.n	800353a <UART_SetConfig+0xeaa>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d041      	beq.n	8003534 <UART_SetConfig+0xea4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d03a      	beq.n	800352e <UART_SetConfig+0xe9e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d033      	beq.n	8003528 <UART_SetConfig+0xe98>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d02c      	beq.n	8003522 <UART_SetConfig+0xe92>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d025      	beq.n	800351c <UART_SetConfig+0xe8c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2b07      	cmp	r3, #7
 80034d6:	d01e      	beq.n	8003516 <UART_SetConfig+0xe86>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d017      	beq.n	8003510 <UART_SetConfig+0xe80>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d010      	beq.n	800350a <UART_SetConfig+0xe7a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b0a      	cmp	r3, #10
 80034ee:	d009      	beq.n	8003504 <UART_SetConfig+0xe74>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2b0b      	cmp	r3, #11
 80034f6:	d102      	bne.n	80034fe <UART_SetConfig+0xe6e>
 80034f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034fc:	e022      	b.n	8003544 <UART_SetConfig+0xeb4>
 80034fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003502:	e01f      	b.n	8003544 <UART_SetConfig+0xeb4>
 8003504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003508:	e01c      	b.n	8003544 <UART_SetConfig+0xeb4>
 800350a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350e:	e019      	b.n	8003544 <UART_SetConfig+0xeb4>
 8003510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003514:	e016      	b.n	8003544 <UART_SetConfig+0xeb4>
 8003516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351a:	e013      	b.n	8003544 <UART_SetConfig+0xeb4>
 800351c:	f241 5354 	movw	r3, #5460	; 0x1554
 8003520:	e010      	b.n	8003544 <UART_SetConfig+0xeb4>
 8003522:	f641 1398 	movw	r3, #6552	; 0x1998
 8003526:	e00d      	b.n	8003544 <UART_SetConfig+0xeb4>
 8003528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800352c:	e00a      	b.n	8003544 <UART_SetConfig+0xeb4>
 800352e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003532:	e007      	b.n	8003544 <UART_SetConfig+0xeb4>
 8003534:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003538:	e004      	b.n	8003544 <UART_SetConfig+0xeb4>
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	e001      	b.n	8003544 <UART_SetConfig+0xeb4>
 8003540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6852      	ldr	r2, [r2, #4]
 8003548:	0852      	lsrs	r2, r2, #1
 800354a:	441a      	add	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	b29b      	uxth	r3, r3
 8003556:	61fb      	str	r3, [r7, #28]
        break;
 8003558:	e002      	b.n	8003560 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	76fb      	strb	r3, [r7, #27]
        break;
 800355e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d916      	bls.n	8003594 <UART_SetConfig+0xf04>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d212      	bcs.n	8003594 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f023 030f 	bic.w	r3, r3, #15
 8003576:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	b29a      	uxth	r2, r3
 8003584:	89fb      	ldrh	r3, [r7, #14]
 8003586:	4313      	orrs	r3, r2
 8003588:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	89fa      	ldrh	r2, [r7, #14]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	e20c      	b.n	80039ae <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	76fb      	strb	r3, [r7, #27]
 8003598:	e209      	b.n	80039ae <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 800359a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800359e:	2b08      	cmp	r3, #8
 80035a0:	f200 81f4 	bhi.w	800398c <UART_SetConfig+0x12fc>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <UART_SetConfig+0xf1c>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	08003601 	.word	0x08003601
 80035b0:	080036b7 	.word	0x080036b7
 80035b4:	0800376d 	.word	0x0800376d
 80035b8:	0800398d 	.word	0x0800398d
 80035bc:	08003817 	.word	0x08003817
 80035c0:	0800398d 	.word	0x0800398d
 80035c4:	0800398d 	.word	0x0800398d
 80035c8:	0800398d 	.word	0x0800398d
 80035cc:	080038cd 	.word	0x080038cd
 80035d0:	0001e848 	.word	0x0001e848
 80035d4:	01e84800 	.word	0x01e84800
 80035d8:	0003d090 	.word	0x0003d090
 80035dc:	0007a120 	.word	0x0007a120
 80035e0:	000f4240 	.word	0x000f4240
 80035e4:	001e8480 	.word	0x001e8480
 80035e8:	0028b0aa 	.word	0x0028b0aa
 80035ec:	0030d400 	.word	0x0030d400
 80035f0:	003d0900 	.word	0x003d0900
 80035f4:	00516154 	.word	0x00516154
 80035f8:	007a1200 	.word	0x007a1200
 80035fc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003600:	f7fe fa4a 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8003604:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d044      	beq.n	8003698 <UART_SetConfig+0x1008>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b01      	cmp	r3, #1
 8003614:	d03e      	beq.n	8003694 <UART_SetConfig+0x1004>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b02      	cmp	r3, #2
 800361c:	d038      	beq.n	8003690 <UART_SetConfig+0x1000>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b03      	cmp	r3, #3
 8003624:	d032      	beq.n	800368c <UART_SetConfig+0xffc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b04      	cmp	r3, #4
 800362c:	d02c      	beq.n	8003688 <UART_SetConfig+0xff8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b05      	cmp	r3, #5
 8003634:	d026      	beq.n	8003684 <UART_SetConfig+0xff4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b06      	cmp	r3, #6
 800363c:	d020      	beq.n	8003680 <UART_SetConfig+0xff0>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b07      	cmp	r3, #7
 8003644:	d01a      	beq.n	800367c <UART_SetConfig+0xfec>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b08      	cmp	r3, #8
 800364c:	d014      	beq.n	8003678 <UART_SetConfig+0xfe8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b09      	cmp	r3, #9
 8003654:	d00e      	beq.n	8003674 <UART_SetConfig+0xfe4>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b0a      	cmp	r3, #10
 800365c:	d008      	beq.n	8003670 <UART_SetConfig+0xfe0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b0b      	cmp	r3, #11
 8003664:	d102      	bne.n	800366c <UART_SetConfig+0xfdc>
 8003666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800366a:	e016      	b.n	800369a <UART_SetConfig+0x100a>
 800366c:	2301      	movs	r3, #1
 800366e:	e014      	b.n	800369a <UART_SetConfig+0x100a>
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	e012      	b.n	800369a <UART_SetConfig+0x100a>
 8003674:	2340      	movs	r3, #64	; 0x40
 8003676:	e010      	b.n	800369a <UART_SetConfig+0x100a>
 8003678:	2320      	movs	r3, #32
 800367a:	e00e      	b.n	800369a <UART_SetConfig+0x100a>
 800367c:	2310      	movs	r3, #16
 800367e:	e00c      	b.n	800369a <UART_SetConfig+0x100a>
 8003680:	230c      	movs	r3, #12
 8003682:	e00a      	b.n	800369a <UART_SetConfig+0x100a>
 8003684:	230a      	movs	r3, #10
 8003686:	e008      	b.n	800369a <UART_SetConfig+0x100a>
 8003688:	2308      	movs	r3, #8
 800368a:	e006      	b.n	800369a <UART_SetConfig+0x100a>
 800368c:	2306      	movs	r3, #6
 800368e:	e004      	b.n	800369a <UART_SetConfig+0x100a>
 8003690:	2304      	movs	r3, #4
 8003692:	e002      	b.n	800369a <UART_SetConfig+0x100a>
 8003694:	2302      	movs	r3, #2
 8003696:	e000      	b.n	800369a <UART_SetConfig+0x100a>
 8003698:	2301      	movs	r3, #1
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	441a      	add	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	61fb      	str	r3, [r7, #28]
        break;
 80036b4:	e16d      	b.n	8003992 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b6:	f7fe fa05 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 80036ba:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d044      	beq.n	800374e <UART_SetConfig+0x10be>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d03e      	beq.n	800374a <UART_SetConfig+0x10ba>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d038      	beq.n	8003746 <UART_SetConfig+0x10b6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d032      	beq.n	8003742 <UART_SetConfig+0x10b2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d02c      	beq.n	800373e <UART_SetConfig+0x10ae>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d026      	beq.n	800373a <UART_SetConfig+0x10aa>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d020      	beq.n	8003736 <UART_SetConfig+0x10a6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b07      	cmp	r3, #7
 80036fa:	d01a      	beq.n	8003732 <UART_SetConfig+0x10a2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2b08      	cmp	r3, #8
 8003702:	d014      	beq.n	800372e <UART_SetConfig+0x109e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2b09      	cmp	r3, #9
 800370a:	d00e      	beq.n	800372a <UART_SetConfig+0x109a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2b0a      	cmp	r3, #10
 8003712:	d008      	beq.n	8003726 <UART_SetConfig+0x1096>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2b0b      	cmp	r3, #11
 800371a:	d102      	bne.n	8003722 <UART_SetConfig+0x1092>
 800371c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003720:	e016      	b.n	8003750 <UART_SetConfig+0x10c0>
 8003722:	2301      	movs	r3, #1
 8003724:	e014      	b.n	8003750 <UART_SetConfig+0x10c0>
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	e012      	b.n	8003750 <UART_SetConfig+0x10c0>
 800372a:	2340      	movs	r3, #64	; 0x40
 800372c:	e010      	b.n	8003750 <UART_SetConfig+0x10c0>
 800372e:	2320      	movs	r3, #32
 8003730:	e00e      	b.n	8003750 <UART_SetConfig+0x10c0>
 8003732:	2310      	movs	r3, #16
 8003734:	e00c      	b.n	8003750 <UART_SetConfig+0x10c0>
 8003736:	230c      	movs	r3, #12
 8003738:	e00a      	b.n	8003750 <UART_SetConfig+0x10c0>
 800373a:	230a      	movs	r3, #10
 800373c:	e008      	b.n	8003750 <UART_SetConfig+0x10c0>
 800373e:	2308      	movs	r3, #8
 8003740:	e006      	b.n	8003750 <UART_SetConfig+0x10c0>
 8003742:	2306      	movs	r3, #6
 8003744:	e004      	b.n	8003750 <UART_SetConfig+0x10c0>
 8003746:	2304      	movs	r3, #4
 8003748:	e002      	b.n	8003750 <UART_SetConfig+0x10c0>
 800374a:	2302      	movs	r3, #2
 800374c:	e000      	b.n	8003750 <UART_SetConfig+0x10c0>
 800374e:	2301      	movs	r3, #1
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	fbb2 f2f3 	udiv	r2, r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	b29b      	uxth	r3, r3
 8003768:	61fb      	str	r3, [r7, #28]
        break;
 800376a:	e112      	b.n	8003992 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d044      	beq.n	80037fe <UART_SetConfig+0x116e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	2b01      	cmp	r3, #1
 800377a:	d03e      	beq.n	80037fa <UART_SetConfig+0x116a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2b02      	cmp	r3, #2
 8003782:	d038      	beq.n	80037f6 <UART_SetConfig+0x1166>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b03      	cmp	r3, #3
 800378a:	d032      	beq.n	80037f2 <UART_SetConfig+0x1162>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2b04      	cmp	r3, #4
 8003792:	d02c      	beq.n	80037ee <UART_SetConfig+0x115e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	2b05      	cmp	r3, #5
 800379a:	d026      	beq.n	80037ea <UART_SetConfig+0x115a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	2b06      	cmp	r3, #6
 80037a2:	d020      	beq.n	80037e6 <UART_SetConfig+0x1156>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2b07      	cmp	r3, #7
 80037aa:	d01a      	beq.n	80037e2 <UART_SetConfig+0x1152>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d014      	beq.n	80037de <UART_SetConfig+0x114e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	d00e      	beq.n	80037da <UART_SetConfig+0x114a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2b0a      	cmp	r3, #10
 80037c2:	d008      	beq.n	80037d6 <UART_SetConfig+0x1146>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	2b0b      	cmp	r3, #11
 80037ca:	d102      	bne.n	80037d2 <UART_SetConfig+0x1142>
 80037cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80037d0:	e016      	b.n	8003800 <UART_SetConfig+0x1170>
 80037d2:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <UART_SetConfig+0x1348>)
 80037d4:	e014      	b.n	8003800 <UART_SetConfig+0x1170>
 80037d6:	4b81      	ldr	r3, [pc, #516]	; (80039dc <UART_SetConfig+0x134c>)
 80037d8:	e012      	b.n	8003800 <UART_SetConfig+0x1170>
 80037da:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <UART_SetConfig+0x1350>)
 80037dc:	e010      	b.n	8003800 <UART_SetConfig+0x1170>
 80037de:	4b81      	ldr	r3, [pc, #516]	; (80039e4 <UART_SetConfig+0x1354>)
 80037e0:	e00e      	b.n	8003800 <UART_SetConfig+0x1170>
 80037e2:	4b81      	ldr	r3, [pc, #516]	; (80039e8 <UART_SetConfig+0x1358>)
 80037e4:	e00c      	b.n	8003800 <UART_SetConfig+0x1170>
 80037e6:	4b81      	ldr	r3, [pc, #516]	; (80039ec <UART_SetConfig+0x135c>)
 80037e8:	e00a      	b.n	8003800 <UART_SetConfig+0x1170>
 80037ea:	4b81      	ldr	r3, [pc, #516]	; (80039f0 <UART_SetConfig+0x1360>)
 80037ec:	e008      	b.n	8003800 <UART_SetConfig+0x1170>
 80037ee:	4b81      	ldr	r3, [pc, #516]	; (80039f4 <UART_SetConfig+0x1364>)
 80037f0:	e006      	b.n	8003800 <UART_SetConfig+0x1170>
 80037f2:	4b81      	ldr	r3, [pc, #516]	; (80039f8 <UART_SetConfig+0x1368>)
 80037f4:	e004      	b.n	8003800 <UART_SetConfig+0x1170>
 80037f6:	4b81      	ldr	r3, [pc, #516]	; (80039fc <UART_SetConfig+0x136c>)
 80037f8:	e002      	b.n	8003800 <UART_SetConfig+0x1170>
 80037fa:	4b81      	ldr	r3, [pc, #516]	; (8003a00 <UART_SetConfig+0x1370>)
 80037fc:	e000      	b.n	8003800 <UART_SetConfig+0x1170>
 80037fe:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <UART_SetConfig+0x1348>)
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6852      	ldr	r2, [r2, #4]
 8003804:	0852      	lsrs	r2, r2, #1
 8003806:	441a      	add	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	b29b      	uxth	r3, r3
 8003812:	61fb      	str	r3, [r7, #28]
        break;
 8003814:	e0bd      	b.n	8003992 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003816:	f7fe f8d1 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 800381a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d044      	beq.n	80038ae <UART_SetConfig+0x121e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	2b01      	cmp	r3, #1
 800382a:	d03e      	beq.n	80038aa <UART_SetConfig+0x121a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2b02      	cmp	r3, #2
 8003832:	d038      	beq.n	80038a6 <UART_SetConfig+0x1216>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2b03      	cmp	r3, #3
 800383a:	d032      	beq.n	80038a2 <UART_SetConfig+0x1212>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2b04      	cmp	r3, #4
 8003842:	d02c      	beq.n	800389e <UART_SetConfig+0x120e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b05      	cmp	r3, #5
 800384a:	d026      	beq.n	800389a <UART_SetConfig+0x120a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2b06      	cmp	r3, #6
 8003852:	d020      	beq.n	8003896 <UART_SetConfig+0x1206>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2b07      	cmp	r3, #7
 800385a:	d01a      	beq.n	8003892 <UART_SetConfig+0x1202>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	2b08      	cmp	r3, #8
 8003862:	d014      	beq.n	800388e <UART_SetConfig+0x11fe>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2b09      	cmp	r3, #9
 800386a:	d00e      	beq.n	800388a <UART_SetConfig+0x11fa>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2b0a      	cmp	r3, #10
 8003872:	d008      	beq.n	8003886 <UART_SetConfig+0x11f6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b0b      	cmp	r3, #11
 800387a:	d102      	bne.n	8003882 <UART_SetConfig+0x11f2>
 800387c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003880:	e016      	b.n	80038b0 <UART_SetConfig+0x1220>
 8003882:	2301      	movs	r3, #1
 8003884:	e014      	b.n	80038b0 <UART_SetConfig+0x1220>
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	e012      	b.n	80038b0 <UART_SetConfig+0x1220>
 800388a:	2340      	movs	r3, #64	; 0x40
 800388c:	e010      	b.n	80038b0 <UART_SetConfig+0x1220>
 800388e:	2320      	movs	r3, #32
 8003890:	e00e      	b.n	80038b0 <UART_SetConfig+0x1220>
 8003892:	2310      	movs	r3, #16
 8003894:	e00c      	b.n	80038b0 <UART_SetConfig+0x1220>
 8003896:	230c      	movs	r3, #12
 8003898:	e00a      	b.n	80038b0 <UART_SetConfig+0x1220>
 800389a:	230a      	movs	r3, #10
 800389c:	e008      	b.n	80038b0 <UART_SetConfig+0x1220>
 800389e:	2308      	movs	r3, #8
 80038a0:	e006      	b.n	80038b0 <UART_SetConfig+0x1220>
 80038a2:	2306      	movs	r3, #6
 80038a4:	e004      	b.n	80038b0 <UART_SetConfig+0x1220>
 80038a6:	2304      	movs	r3, #4
 80038a8:	e002      	b.n	80038b0 <UART_SetConfig+0x1220>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e000      	b.n	80038b0 <UART_SetConfig+0x1220>
 80038ae:	2301      	movs	r3, #1
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	61fb      	str	r3, [r7, #28]
        break;
 80038ca:	e062      	b.n	8003992 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d04e      	beq.n	8003972 <UART_SetConfig+0x12e2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d047      	beq.n	800396c <UART_SetConfig+0x12dc>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d040      	beq.n	8003966 <UART_SetConfig+0x12d6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d039      	beq.n	8003960 <UART_SetConfig+0x12d0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d032      	beq.n	800395a <UART_SetConfig+0x12ca>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	d02b      	beq.n	8003954 <UART_SetConfig+0x12c4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2b06      	cmp	r3, #6
 8003902:	d024      	beq.n	800394e <UART_SetConfig+0x12be>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b07      	cmp	r3, #7
 800390a:	d01d      	beq.n	8003948 <UART_SetConfig+0x12b8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b08      	cmp	r3, #8
 8003912:	d016      	beq.n	8003942 <UART_SetConfig+0x12b2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b09      	cmp	r3, #9
 800391a:	d00f      	beq.n	800393c <UART_SetConfig+0x12ac>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b0a      	cmp	r3, #10
 8003922:	d008      	beq.n	8003936 <UART_SetConfig+0x12a6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2b0b      	cmp	r3, #11
 800392a:	d101      	bne.n	8003930 <UART_SetConfig+0x12a0>
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	e022      	b.n	8003976 <UART_SetConfig+0x12e6>
 8003930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003934:	e01f      	b.n	8003976 <UART_SetConfig+0x12e6>
 8003936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800393a:	e01c      	b.n	8003976 <UART_SetConfig+0x12e6>
 800393c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003940:	e019      	b.n	8003976 <UART_SetConfig+0x12e6>
 8003942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003946:	e016      	b.n	8003976 <UART_SetConfig+0x12e6>
 8003948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800394c:	e013      	b.n	8003976 <UART_SetConfig+0x12e6>
 800394e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003952:	e010      	b.n	8003976 <UART_SetConfig+0x12e6>
 8003954:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003958:	e00d      	b.n	8003976 <UART_SetConfig+0x12e6>
 800395a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395e:	e00a      	b.n	8003976 <UART_SetConfig+0x12e6>
 8003960:	f241 5355 	movw	r3, #5461	; 0x1555
 8003964:	e007      	b.n	8003976 <UART_SetConfig+0x12e6>
 8003966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800396a:	e004      	b.n	8003976 <UART_SetConfig+0x12e6>
 800396c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003970:	e001      	b.n	8003976 <UART_SetConfig+0x12e6>
 8003972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6852      	ldr	r2, [r2, #4]
 800397a:	0852      	lsrs	r2, r2, #1
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	b29b      	uxth	r3, r3
 8003988:	61fb      	str	r3, [r7, #28]
        break;
 800398a:	e002      	b.n	8003992 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	76fb      	strb	r3, [r7, #27]
        break;
 8003990:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b0f      	cmp	r3, #15
 8003996:	d908      	bls.n	80039aa <UART_SetConfig+0x131a>
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399e:	d204      	bcs.n	80039aa <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	e001      	b.n	80039ae <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80039ca:	7efb      	ldrb	r3, [r7, #27]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80039d6:	bf00      	nop
 80039d8:	00f42400 	.word	0x00f42400
 80039dc:	0001e848 	.word	0x0001e848
 80039e0:	0003d090 	.word	0x0003d090
 80039e4:	0007a120 	.word	0x0007a120
 80039e8:	000f4240 	.word	0x000f4240
 80039ec:	00145855 	.word	0x00145855
 80039f0:	00186a00 	.word	0x00186a00
 80039f4:	001e8480 	.word	0x001e8480
 80039f8:	0028b0aa 	.word	0x0028b0aa
 80039fc:	003d0900 	.word	0x003d0900
 8003a00:	007a1200 	.word	0x007a1200

08003a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01a      	beq.n	8003b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b02:	d10a      	bne.n	8003b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b58:	f7fc ff98 	bl	8000a8c <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d10e      	bne.n	8003b8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f82c 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e022      	b.n	8003bd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d10e      	bne.n	8003bb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f816 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e00c      	b.n	8003bd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be8:	e02c      	b.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf0:	d028      	beq.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fc ff4b 	bl	8000a8c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d11d      	bne.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e00f      	b.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d0c3      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e027      	b.n	8003cd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2224      	movs	r2, #36	; 0x24
 8003c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003cb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e02d      	b.n	8003d52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2224      	movs	r2, #36	; 0x24
 8003d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f850 	bl	8003dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e02d      	b.n	8003dce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2224      	movs	r2, #36	; 0x24
 8003d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f812 	bl	8003dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003de0:	4a2f      	ldr	r2, [pc, #188]	; (8003ea0 <UARTEx_SetNbDataToProcess+0xc8>)
 8003de2:	f107 0314 	add.w	r3, r7, #20
 8003de6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003dee:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <UARTEx_SetNbDataToProcess+0xcc>)
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003df8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d108      	bne.n	8003e16 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e14:	e03d      	b.n	8003e92 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e16:	2308      	movs	r3, #8
 8003e18:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	0e5b      	lsrs	r3, r3, #25
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	0f5b      	lsrs	r3, r3, #29
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003e3e:	7fbb      	ldrb	r3, [r7, #30]
 8003e40:	7f3a      	ldrb	r2, [r7, #28]
 8003e42:	f107 0120 	add.w	r1, r7, #32
 8003e46:	440a      	add	r2, r1
 8003e48:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	7f3a      	ldrb	r2, [r7, #28]
 8003e52:	f107 0120 	add.w	r1, r7, #32
 8003e56:	440a      	add	r2, r1
 8003e58:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003e68:	7ffb      	ldrb	r3, [r7, #31]
 8003e6a:	7f7a      	ldrb	r2, [r7, #29]
 8003e6c:	f107 0120 	add.w	r1, r7, #32
 8003e70:	440a      	add	r2, r1
 8003e72:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	7f7a      	ldrb	r2, [r7, #29]
 8003e7c:	f107 0120 	add.w	r1, r7, #32
 8003e80:	440a      	add	r2, r1
 8003e82:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003e86:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003e92:	bf00      	nop
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	080069c4 	.word	0x080069c4
 8003ea4:	080069cc 	.word	0x080069cc

08003ea8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ebe:	f3ef 8305 	mrs	r3, IPSR
 8003ec2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ece:	607b      	str	r3, [r7, #4]
  return(result);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8003eda:	603b      	str	r3, [r7, #0]
  return(result);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <osKernelInitialize+0x3a>
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <osKernelInitialize+0x64>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d103      	bne.n	8003ef2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003eea:	f06f 0305 	mvn.w	r3, #5
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e00c      	b.n	8003f0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <osKernelInitialize+0x64>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <osKernelInitialize+0x64>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e002      	b.n	8003f0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	2000002c 	.word	0x2000002c

08003f20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f26:	f3ef 8305 	mrs	r3, IPSR
 8003f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f32:	f3ef 8310 	mrs	r3, PRIMASK
 8003f36:	607b      	str	r3, [r7, #4]
  return(result);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d105      	bne.n	8003f4a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f42:	603b      	str	r3, [r7, #0]
  return(result);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <osKernelStart+0x3a>
 8003f4a:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <osKernelStart+0x68>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d103      	bne.n	8003f5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f52:	f06f 0305 	mvn.w	r3, #5
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e010      	b.n	8003f7c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <osKernelStart+0x68>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d109      	bne.n	8003f76 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f62:	f7ff ffa1 	bl	8003ea8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <osKernelStart+0x68>)
 8003f68:	2202      	movs	r2, #2
 8003f6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f6c:	f001 f870 	bl	8005050 <vTaskStartScheduler>
      stat = osOK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e002      	b.n	8003f7c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	2000002c 	.word	0x2000002c

08003f8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b090      	sub	sp, #64	; 0x40
 8003f90:	af04      	add	r7, sp, #16
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f9c:	f3ef 8305 	mrs	r3, IPSR
 8003fa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fa2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f040 808f 	bne.w	80040c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003faa:	f3ef 8310 	mrs	r3, PRIMASK
 8003fae:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d105      	bne.n	8003fc2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fba:	617b      	str	r3, [r7, #20]
  return(result);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <osThreadNew+0x3e>
 8003fc2:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <osThreadNew+0x148>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d07e      	beq.n	80040c8 <osThreadNew+0x13c>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d07b      	beq.n	80040c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003fd4:	2318      	movs	r3, #24
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fe0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d045      	beq.n	8004074 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <osThreadNew+0x6a>
        name = attr->name;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <osThreadNew+0x90>
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	2b38      	cmp	r3, #56	; 0x38
 800400e:	d805      	bhi.n	800401c <osThreadNew+0x90>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <osThreadNew+0x94>
        return (NULL);
 800401c:	2300      	movs	r3, #0
 800401e:	e054      	b.n	80040ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	089b      	lsrs	r3, r3, #2
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00e      	beq.n	8004056 <osThreadNew+0xca>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b5b      	cmp	r3, #91	; 0x5b
 800403e:	d90a      	bls.n	8004056 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	d006      	beq.n	8004056 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <osThreadNew+0xca>
        mem = 1;
 8004050:	2301      	movs	r3, #1
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	e010      	b.n	8004078 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10c      	bne.n	8004078 <osThreadNew+0xec>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d108      	bne.n	8004078 <osThreadNew+0xec>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <osThreadNew+0xec>
          mem = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	e001      	b.n	8004078 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d110      	bne.n	80040a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004086:	9202      	str	r2, [sp, #8]
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fe09 	bl	8004cac <xTaskCreateStatic>
 800409a:	4603      	mov	r3, r0
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	e013      	b.n	80040c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d110      	bne.n	80040c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	f107 0310 	add.w	r3, r7, #16
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fe51 	bl	8004d60 <xTaskCreate>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d001      	beq.n	80040c8 <osThreadNew+0x13c>
          hTask = NULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040c8:	693b      	ldr	r3, [r7, #16]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3730      	adds	r7, #48	; 0x30
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	2000002c 	.word	0x2000002c

080040d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e0:	f3ef 8305 	mrs	r3, IPSR
 80040e4:	613b      	str	r3, [r7, #16]
  return(result);
 80040e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10f      	bne.n	800410c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ec:	f3ef 8310 	mrs	r3, PRIMASK
 80040f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040f8:	f3ef 8311 	mrs	r3, BASEPRI
 80040fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <osDelay+0x3c>
 8004104:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <osDelay+0x58>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d103      	bne.n	8004114 <osDelay+0x3c>
    stat = osErrorISR;
 800410c:	f06f 0305 	mvn.w	r3, #5
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e007      	b.n	8004124 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <osDelay+0x4c>
      vTaskDelay(ticks);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 ff62 	bl	8004fe8 <vTaskDelay>
    }
  }

  return (stat);
 8004124:	697b      	ldr	r3, [r7, #20]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	2000002c 	.word	0x2000002c

08004134 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a07      	ldr	r2, [pc, #28]	; (8004160 <vApplicationGetIdleTaskMemory+0x2c>)
 8004144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4a06      	ldr	r2, [pc, #24]	; (8004164 <vApplicationGetIdleTaskMemory+0x30>)
 800414a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2280      	movs	r2, #128	; 0x80
 8004150:	601a      	str	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000030 	.word	0x20000030
 8004164:	2000008c 	.word	0x2000008c

08004168 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a07      	ldr	r2, [pc, #28]	; (8004194 <vApplicationGetTimerTaskMemory+0x2c>)
 8004178:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4a06      	ldr	r2, [pc, #24]	; (8004198 <vApplicationGetTimerTaskMemory+0x30>)
 800417e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004186:	601a      	str	r2, [r3, #0]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	2000028c 	.word	0x2000028c
 8004198:	200002e8 	.word	0x200002e8

0800419c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f103 0208 	add.w	r2, r3, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f103 0208 	add.w	r2, r3, #8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f103 0208 	add.w	r2, r3, #8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	601a      	str	r2, [r3, #0]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004254:	d103      	bne.n	800425e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e00c      	b.n	8004278 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3308      	adds	r3, #8
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	e002      	b.n	800426c <vListInsert+0x2e>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	429a      	cmp	r2, r3
 8004276:	d2f6      	bcs.n	8004266 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	601a      	str	r2, [r3, #0]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6892      	ldr	r2, [r2, #8]
 80042c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6852      	ldr	r2, [r2, #4]
 80042d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d103      	bne.n	80042e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	1e5a      	subs	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	e7fe      	b.n	800432a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800432c:	f002 f80e 	bl	800634c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	68f9      	ldr	r1, [r7, #12]
 800433a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	441a      	add	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	3b01      	subs	r3, #1
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	22ff      	movs	r2, #255	; 0xff
 8004370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	22ff      	movs	r2, #255	; 0xff
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d114      	bne.n	80043ac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01a      	beq.n	80043c0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3310      	adds	r3, #16
 800438e:	4618      	mov	r0, r3
 8004390:	f001 f8de 	bl	8005550 <xTaskRemoveFromEventList>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d012      	beq.n	80043c0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800439a:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <xQueueGenericReset+0xcc>)
 800439c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	e009      	b.n	80043c0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3310      	adds	r3, #16
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fef3 	bl	800419c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3324      	adds	r3, #36	; 0x24
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff feee 	bl	800419c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043c0:	f001 fff2 	bl	80063a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	e000ed04 	.word	0xe000ed04

080043d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08e      	sub	sp, #56	; 0x38
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <xQueueGenericCreateStatic+0x28>
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043fa:	e7fe      	b.n	80043fa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <xQueueGenericCreateStatic+0x42>
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
 8004414:	e7fe      	b.n	8004414 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <xQueueGenericCreateStatic+0x4e>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <xQueueGenericCreateStatic+0x52>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <xQueueGenericCreateStatic+0x54>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d109      	bne.n	8004440 <xQueueGenericCreateStatic+0x6c>
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	e7fe      	b.n	800443e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <xQueueGenericCreateStatic+0x78>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <xQueueGenericCreateStatic+0x7c>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <xQueueGenericCreateStatic+0x7e>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <xQueueGenericCreateStatic+0x96>
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e7fe      	b.n	8004468 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800446a:	2350      	movs	r3, #80	; 0x50
 800446c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b50      	cmp	r3, #80	; 0x50
 8004472:	d009      	beq.n	8004488 <xQueueGenericCreateStatic+0xb4>
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e7fe      	b.n	8004486 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004488:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00d      	beq.n	80044b0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800449c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f805 	bl	80044ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3730      	adds	r7, #48	; 0x30
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e002      	b.n	80044dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044e8:	2101      	movs	r1, #1
 80044ea:	69b8      	ldr	r0, [r7, #24]
 80044ec:	f7ff ff0a 	bl	8004304 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08e      	sub	sp, #56	; 0x38
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800450e:	2300      	movs	r3, #0
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <xQueueGenericSend+0x30>
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
 800452e:	e7fe      	b.n	800452e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <xQueueGenericSend+0x3e>
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <xQueueGenericSend+0x42>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <xQueueGenericSend+0x44>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <xQueueGenericSend+0x5c>
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	e7fe      	b.n	800455a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d103      	bne.n	800456a <xQueueGenericSend+0x6a>
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <xQueueGenericSend+0x6e>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <xQueueGenericSend+0x70>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <xQueueGenericSend+0x88>
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	623b      	str	r3, [r7, #32]
 8004586:	e7fe      	b.n	8004586 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004588:	f001 f998 	bl	80058bc <xTaskGetSchedulerState>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <xQueueGenericSend+0x98>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <xQueueGenericSend+0x9c>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <xQueueGenericSend+0x9e>
 800459c:	2300      	movs	r3, #0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <xQueueGenericSend+0xb6>
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	e7fe      	b.n	80045b4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045b6:	f001 fec9 	bl	800634c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d302      	bcc.n	80045cc <xQueueGenericSend+0xcc>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d129      	bne.n	8004620 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045d2:	f000 f9ff 	bl	80049d4 <prvCopyDataToQueue>
 80045d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d010      	beq.n	8004602 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	3324      	adds	r3, #36	; 0x24
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 ffb3 	bl	8005550 <xTaskRemoveFromEventList>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d013      	beq.n	8004618 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045f0:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <xQueueGenericSend+0x1f0>)
 80045f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	e00a      	b.n	8004618 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004608:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <xQueueGenericSend+0x1f0>)
 800460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004618:	f001 fec6 	bl	80063a8 <vPortExitCritical>
				return pdPASS;
 800461c:	2301      	movs	r3, #1
 800461e:	e063      	b.n	80046e8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004626:	f001 febf 	bl	80063a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800462a:	2300      	movs	r3, #0
 800462c:	e05c      	b.n	80046e8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004634:	f107 0314 	add.w	r3, r7, #20
 8004638:	4618      	mov	r0, r3
 800463a:	f000 ffeb 	bl	8005614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800463e:	2301      	movs	r3, #1
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004642:	f001 feb1 	bl	80063a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004646:	f000 fd67 	bl	8005118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800464a:	f001 fe7f 	bl	800634c <vPortEnterCritical>
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004654:	b25b      	sxtb	r3, r3
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800465a:	d103      	bne.n	8004664 <xQueueGenericSend+0x164>
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800466a:	b25b      	sxtb	r3, r3
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004670:	d103      	bne.n	800467a <xQueueGenericSend+0x17a>
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800467a:	f001 fe95 	bl	80063a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800467e:	1d3a      	adds	r2, r7, #4
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	4611      	mov	r1, r2
 8004686:	4618      	mov	r0, r3
 8004688:	f000 ffda 	bl	8005640 <xTaskCheckForTimeOut>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d124      	bne.n	80046dc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004694:	f000 fa96 	bl	8004bc4 <prvIsQueueFull>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d018      	beq.n	80046d0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	3310      	adds	r3, #16
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 ff04 	bl	80054b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ae:	f000 fa21 	bl	8004af4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046b2:	f000 fd3f 	bl	8005134 <xTaskResumeAll>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f47f af7c 	bne.w	80045b6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <xQueueGenericSend+0x1f0>)
 80046c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	e772      	b.n	80045b6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d2:	f000 fa0f 	bl	8004af4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046d6:	f000 fd2d 	bl	8005134 <xTaskResumeAll>
 80046da:	e76c      	b.n	80045b6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046de:	f000 fa09 	bl	8004af4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046e2:	f000 fd27 	bl	8005134 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3738      	adds	r7, #56	; 0x38
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	e000ed04 	.word	0xe000ed04

080046f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	; 0x38
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <xQueueGenericSendFromISR+0x2c>
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
 800471e:	e7fe      	b.n	800471e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <xQueueGenericSendFromISR+0x3a>
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <xQueueGenericSendFromISR+0x3e>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <xQueueGenericSendFromISR+0x40>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <xQueueGenericSendFromISR+0x58>
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	623b      	str	r3, [r7, #32]
 800474a:	e7fe      	b.n	800474a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d103      	bne.n	800475a <xQueueGenericSendFromISR+0x66>
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <xQueueGenericSendFromISR+0x6a>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <xQueueGenericSendFromISR+0x6c>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <xQueueGenericSendFromISR+0x84>
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	e7fe      	b.n	8004776 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004778:	f001 fec4 	bl	8006504 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800477c:	f3ef 8211 	mrs	r2, BASEPRI
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	61ba      	str	r2, [r7, #24]
 8004792:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004794:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <xQueueGenericSendFromISR+0xb6>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d12c      	bne.n	8004804 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ba:	f000 f90b 	bl	80049d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c6:	d112      	bne.n	80047ee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d016      	beq.n	80047fe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	3324      	adds	r3, #36	; 0x24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 febb 	bl	8005550 <xTaskRemoveFromEventList>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047f2:	3301      	adds	r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	b25a      	sxtb	r2, r3
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047fe:	2301      	movs	r3, #1
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004802:	e001      	b.n	8004808 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004804:	2300      	movs	r3, #0
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004814:	4618      	mov	r0, r3
 8004816:	3738      	adds	r7, #56	; 0x38
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <xQueueReceive+0x2e>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	623b      	str	r3, [r7, #32]
 8004848:	e7fe      	b.n	8004848 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <xQueueReceive+0x3c>
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <xQueueReceive+0x40>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <xQueueReceive+0x42>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <xQueueReceive+0x5a>
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e7fe      	b.n	8004874 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004876:	f001 f821 	bl	80058bc <xTaskGetSchedulerState>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <xQueueReceive+0x6a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <xQueueReceive+0x6e>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <xQueueReceive+0x70>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <xQueueReceive+0x88>
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e7fe      	b.n	80048a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048a4:	f001 fd52 	bl	800634c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01f      	beq.n	80048f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048b8:	f000 f8f6 	bl	8004aa8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	1e5a      	subs	r2, r3, #1
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00f      	beq.n	80048ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	3310      	adds	r3, #16
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fe3d 	bl	8005550 <xTaskRemoveFromEventList>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048dc:	4b3c      	ldr	r3, [pc, #240]	; (80049d0 <xQueueReceive+0x1b4>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048ec:	f001 fd5c 	bl	80063a8 <vPortExitCritical>
				return pdPASS;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e069      	b.n	80049c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d103      	bne.n	8004902 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048fa:	f001 fd55 	bl	80063a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048fe:	2300      	movs	r3, #0
 8004900:	e062      	b.n	80049c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004908:	f107 0310 	add.w	r3, r7, #16
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fe81 	bl	8005614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004916:	f001 fd47 	bl	80063a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800491a:	f000 fbfd 	bl	8005118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800491e:	f001 fd15 	bl	800634c <vPortEnterCritical>
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004928:	b25b      	sxtb	r3, r3
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800492e:	d103      	bne.n	8004938 <xQueueReceive+0x11c>
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800493e:	b25b      	sxtb	r3, r3
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004944:	d103      	bne.n	800494e <xQueueReceive+0x132>
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800494e:	f001 fd2b 	bl	80063a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004952:	1d3a      	adds	r2, r7, #4
 8004954:	f107 0310 	add.w	r3, r7, #16
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fe70 	bl	8005640 <xTaskCheckForTimeOut>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d123      	bne.n	80049ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004968:	f000 f916 	bl	8004b98 <prvIsQueueEmpty>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d017      	beq.n	80049a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	3324      	adds	r3, #36	; 0x24
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4611      	mov	r1, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fd9a 	bl	80054b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004982:	f000 f8b7 	bl	8004af4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004986:	f000 fbd5 	bl	8005134 <xTaskResumeAll>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d189      	bne.n	80048a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <xQueueReceive+0x1b4>)
 8004992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	e780      	b.n	80048a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a4:	f000 f8a6 	bl	8004af4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049a8:	f000 fbc4 	bl	8005134 <xTaskResumeAll>
 80049ac:	e77a      	b.n	80048a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b0:	f000 f8a0 	bl	8004af4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049b4:	f000 fbbe 	bl	8005134 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ba:	f000 f8ed 	bl	8004b98 <prvIsQueueEmpty>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f43f af6f 	beq.w	80048a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3730      	adds	r7, #48	; 0x30
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d14d      	bne.n	8004a96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 ff7a 	bl	80058f8 <xTaskPriorityDisinherit>
 8004a04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	e043      	b.n	8004a96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d119      	bne.n	8004a48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6858      	ldr	r0, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	f001 ffa8 	bl	8006974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	441a      	add	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d32b      	bcc.n	8004a96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	e026      	b.n	8004a96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68d8      	ldr	r0, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	461a      	mov	r2, r3
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	f001 ff8e 	bl	8006974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	425b      	negs	r3, r3
 8004a62:	441a      	add	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d207      	bcs.n	8004a84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	425b      	negs	r3, r3
 8004a7e:	441a      	add	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d105      	bne.n	8004a96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a9e:	697b      	ldr	r3, [r7, #20]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d018      	beq.n	8004aec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	441a      	add	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d303      	bcc.n	8004adc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68d9      	ldr	r1, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6838      	ldr	r0, [r7, #0]
 8004ae8:	f001 ff44 	bl	8006974 <memcpy>
	}
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004afc:	f001 fc26 	bl	800634c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b08:	e011      	b.n	8004b2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d012      	beq.n	8004b38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3324      	adds	r3, #36	; 0x24
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fd1a 	bl	8005550 <xTaskRemoveFromEventList>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b22:	f000 fded 	bl	8005700 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	dce9      	bgt.n	8004b0a <prvUnlockQueue+0x16>
 8004b36:	e000      	b.n	8004b3a <prvUnlockQueue+0x46>
					break;
 8004b38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	22ff      	movs	r2, #255	; 0xff
 8004b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b42:	f001 fc31 	bl	80063a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b46:	f001 fc01 	bl	800634c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b52:	e011      	b.n	8004b78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d012      	beq.n	8004b82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3310      	adds	r3, #16
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fcf5 	bl	8005550 <xTaskRemoveFromEventList>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b6c:	f000 fdc8 	bl	8005700 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b70:	7bbb      	ldrb	r3, [r7, #14]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dce9      	bgt.n	8004b54 <prvUnlockQueue+0x60>
 8004b80:	e000      	b.n	8004b84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	22ff      	movs	r2, #255	; 0xff
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b8c:	f001 fc0c 	bl	80063a8 <vPortExitCritical>
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ba0:	f001 fbd4 	bl	800634c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e001      	b.n	8004bb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bb6:	f001 fbf7 	bl	80063a8 <vPortExitCritical>

	return xReturn;
 8004bba:	68fb      	ldr	r3, [r7, #12]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bcc:	f001 fbbe 	bl	800634c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d102      	bne.n	8004be2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e001      	b.n	8004be6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004be6:	f001 fbdf 	bl	80063a8 <vPortExitCritical>

	return xReturn;
 8004bea:	68fb      	ldr	r3, [r7, #12]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e014      	b.n	8004c2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c04:	4a0e      	ldr	r2, [pc, #56]	; (8004c40 <vQueueAddToRegistry+0x4c>)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c10:	490b      	ldr	r1, [pc, #44]	; (8004c40 <vQueueAddToRegistry+0x4c>)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c1a:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <vQueueAddToRegistry+0x4c>)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c26:	e005      	b.n	8004c34 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b07      	cmp	r3, #7
 8004c32:	d9e7      	bls.n	8004c04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	20001a18 	.word	0x20001a18

08004c44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c54:	f001 fb7a 	bl	800634c <vPortEnterCritical>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c64:	d103      	bne.n	8004c6e <vQueueWaitForMessageRestricted+0x2a>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7a:	d103      	bne.n	8004c84 <vQueueWaitForMessageRestricted+0x40>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c84:	f001 fb90 	bl	80063a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3324      	adds	r3, #36	; 0x24
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fc2f 	bl	80054fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c9e:	6978      	ldr	r0, [r7, #20]
 8004ca0:	f7ff ff28 	bl	8004af4 <prvUnlockQueue>
	}
 8004ca4:	bf00      	nop
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08e      	sub	sp, #56	; 0x38
 8004cb0:	af04      	add	r7, sp, #16
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <xTaskCreateStatic+0x28>
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	e7fe      	b.n	8004cd2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <xTaskCreateStatic+0x42>
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	e7fe      	b.n	8004cec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cee:	235c      	movs	r3, #92	; 0x5c
 8004cf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b5c      	cmp	r3, #92	; 0x5c
 8004cf6:	d009      	beq.n	8004d0c <xTaskCreateStatic+0x60>
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	e7fe      	b.n	8004d0a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01e      	beq.n	8004d52 <xTaskCreateStatic+0xa6>
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01b      	beq.n	8004d52 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	9303      	str	r3, [sp, #12]
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	9302      	str	r3, [sp, #8]
 8004d34:	f107 0314 	add.w	r3, r7, #20
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f850 	bl	8004dea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d4c:	f000 f8dc 	bl	8004f08 <prvAddNewTaskToReadyList>
 8004d50:	e001      	b.n	8004d56 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d56:	697b      	ldr	r3, [r7, #20]
	}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3728      	adds	r7, #40	; 0x28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08c      	sub	sp, #48	; 0x30
 8004d64:	af04      	add	r7, sp, #16
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 fc03 	bl	8006580 <pvPortMalloc>
 8004d7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00e      	beq.n	8004da0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d82:	205c      	movs	r0, #92	; 0x5c
 8004d84:	f001 fbfc 	bl	8006580 <pvPortMalloc>
 8004d88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
 8004d96:	e005      	b.n	8004da4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d98:	6978      	ldr	r0, [r7, #20]
 8004d9a:	f001 fcb3 	bl	8006704 <vPortFree>
 8004d9e:	e001      	b.n	8004da4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d017      	beq.n	8004dda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	2300      	movs	r3, #0
 8004db6:	9303      	str	r3, [sp, #12]
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	9302      	str	r3, [sp, #8]
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 f80e 	bl	8004dea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dce:	69f8      	ldr	r0, [r7, #28]
 8004dd0:	f000 f89a 	bl	8004f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e002      	b.n	8004de0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004de0:	69bb      	ldr	r3, [r7, #24]
	}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b088      	sub	sp, #32
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	461a      	mov	r2, r3
 8004e02:	21a5      	movs	r1, #165	; 0xa5
 8004e04:	f001 fdc1 	bl	800698a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e12:	3b01      	subs	r3, #1
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	f023 0307 	bic.w	r3, r3, #7
 8004e20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d009      	beq.n	8004e40 <prvInitialiseNewTask+0x56>
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e7fe      	b.n	8004e3e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01f      	beq.n	8004e86 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e012      	b.n	8004e72 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	7819      	ldrb	r1, [r3, #0]
 8004e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	3334      	adds	r3, #52	; 0x34
 8004e5c:	460a      	mov	r2, r1
 8004e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d006      	beq.n	8004e7a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b0f      	cmp	r3, #15
 8004e76:	d9e9      	bls.n	8004e4c <prvInitialiseNewTask+0x62>
 8004e78:	e000      	b.n	8004e7c <prvInitialiseNewTask+0x92>
			{
				break;
 8004e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e84:	e003      	b.n	8004e8e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	2b37      	cmp	r3, #55	; 0x37
 8004e92:	d901      	bls.n	8004e98 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e94:	2337      	movs	r3, #55	; 0x37
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	3304      	adds	r3, #4
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff f994 	bl	80041dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	3318      	adds	r3, #24
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff f98f 	bl	80041dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	69b8      	ldr	r0, [r7, #24]
 8004ee8:	f001 f90c 	bl	8006104 <pxPortInitialiseStack>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004efe:	bf00      	nop
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f10:	f001 fa1c 	bl	800634c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f14:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <prvAddNewTaskToReadyList+0xc4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	4a2c      	ldr	r2, [pc, #176]	; (8004fcc <prvAddNewTaskToReadyList+0xc4>)
 8004f1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <prvAddNewTaskToReadyList+0xc8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f26:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <prvAddNewTaskToReadyList+0xc8>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f2c:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <prvAddNewTaskToReadyList+0xc4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d110      	bne.n	8004f56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f34:	f000 fc08 	bl	8005748 <prvInitialiseTaskLists>
 8004f38:	e00d      	b.n	8004f56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f3a:	4b26      	ldr	r3, [pc, #152]	; (8004fd4 <prvAddNewTaskToReadyList+0xcc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f42:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <prvAddNewTaskToReadyList+0xc8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d802      	bhi.n	8004f56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f50:	4a1f      	ldr	r2, [pc, #124]	; (8004fd0 <prvAddNewTaskToReadyList+0xc8>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f56:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <prvAddNewTaskToReadyList+0xd0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <prvAddNewTaskToReadyList+0xd0>)
 8004f5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f60:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <prvAddNewTaskToReadyList+0xd0>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <prvAddNewTaskToReadyList+0xd4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d903      	bls.n	8004f7c <prvAddNewTaskToReadyList+0x74>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	4a18      	ldr	r2, [pc, #96]	; (8004fdc <prvAddNewTaskToReadyList+0xd4>)
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <prvAddNewTaskToReadyList+0xd8>)
 8004f8a:	441a      	add	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f7ff f92f 	bl	80041f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f98:	f001 fa06 	bl	80063a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <prvAddNewTaskToReadyList+0xcc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <prvAddNewTaskToReadyList+0xc8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d207      	bcs.n	8004fc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <prvAddNewTaskToReadyList+0xdc>)
 8004fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000bbc 	.word	0x20000bbc
 8004fd0:	200006e8 	.word	0x200006e8
 8004fd4:	20000bc8 	.word	0x20000bc8
 8004fd8:	20000bd8 	.word	0x20000bd8
 8004fdc:	20000bc4 	.word	0x20000bc4
 8004fe0:	200006ec 	.word	0x200006ec
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <vTaskDelay+0x60>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <vTaskDelay+0x2e>
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	e7fe      	b.n	8005014 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005016:	f000 f87f 	bl	8005118 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800501a:	2100      	movs	r1, #0
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fcd7 	bl	80059d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005022:	f000 f887 	bl	8005134 <xTaskResumeAll>
 8005026:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d107      	bne.n	800503e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <vTaskDelay+0x64>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000be4 	.word	0x20000be4
 800504c:	e000ed04 	.word	0xe000ed04

08005050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800505e:	463a      	mov	r2, r7
 8005060:	1d39      	adds	r1, r7, #4
 8005062:	f107 0308 	add.w	r3, r7, #8
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff f864 	bl	8004134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	9202      	str	r2, [sp, #8]
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	2300      	movs	r3, #0
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	2300      	movs	r3, #0
 800507c:	460a      	mov	r2, r1
 800507e:	4920      	ldr	r1, [pc, #128]	; (8005100 <vTaskStartScheduler+0xb0>)
 8005080:	4820      	ldr	r0, [pc, #128]	; (8005104 <vTaskStartScheduler+0xb4>)
 8005082:	f7ff fe13 	bl	8004cac <xTaskCreateStatic>
 8005086:	4602      	mov	r2, r0
 8005088:	4b1f      	ldr	r3, [pc, #124]	; (8005108 <vTaskStartScheduler+0xb8>)
 800508a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800508c:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <vTaskStartScheduler+0xb8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005094:	2301      	movs	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e001      	b.n	800509e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d102      	bne.n	80050aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050a4:	f000 fce8 	bl	8005a78 <xTimerCreateTimerTask>
 80050a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d115      	bne.n	80050dc <vTaskStartScheduler+0x8c>
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <vTaskStartScheduler+0xbc>)
 80050c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <vTaskStartScheduler+0xc0>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050d0:	4b10      	ldr	r3, [pc, #64]	; (8005114 <vTaskStartScheduler+0xc4>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050d6:	f001 f89b 	bl	8006210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050da:	e00d      	b.n	80050f8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e2:	d109      	bne.n	80050f8 <vTaskStartScheduler+0xa8>
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e7fe      	b.n	80050f6 <vTaskStartScheduler+0xa6>
}
 80050f8:	bf00      	nop
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	080069d4 	.word	0x080069d4
 8005104:	08005719 	.word	0x08005719
 8005108:	20000be0 	.word	0x20000be0
 800510c:	20000bdc 	.word	0x20000bdc
 8005110:	20000bc8 	.word	0x20000bc8
 8005114:	20000bc0 	.word	0x20000bc0

08005118 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <vTaskSuspendAll+0x18>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	4a03      	ldr	r2, [pc, #12]	; (8005130 <vTaskSuspendAll+0x18>)
 8005124:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005126:	bf00      	nop
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000be4 	.word	0x20000be4

08005134 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005142:	4b41      	ldr	r3, [pc, #260]	; (8005248 <xTaskResumeAll+0x114>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <xTaskResumeAll+0x2a>
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	e7fe      	b.n	800515c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800515e:	f001 f8f5 	bl	800634c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005162:	4b39      	ldr	r3, [pc, #228]	; (8005248 <xTaskResumeAll+0x114>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3b01      	subs	r3, #1
 8005168:	4a37      	ldr	r2, [pc, #220]	; (8005248 <xTaskResumeAll+0x114>)
 800516a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800516c:	4b36      	ldr	r3, [pc, #216]	; (8005248 <xTaskResumeAll+0x114>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d162      	bne.n	800523a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005174:	4b35      	ldr	r3, [pc, #212]	; (800524c <xTaskResumeAll+0x118>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d05e      	beq.n	800523a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800517c:	e02f      	b.n	80051de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517e:	4b34      	ldr	r3, [pc, #208]	; (8005250 <xTaskResumeAll+0x11c>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3318      	adds	r3, #24
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff f890 	bl	80042b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3304      	adds	r3, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff f88b 	bl	80042b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <xTaskResumeAll+0x120>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d903      	bls.n	80051ae <xTaskResumeAll+0x7a>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <xTaskResumeAll+0x120>)
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4a27      	ldr	r2, [pc, #156]	; (8005258 <xTaskResumeAll+0x124>)
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f7ff f816 	bl	80041f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ce:	4b23      	ldr	r3, [pc, #140]	; (800525c <xTaskResumeAll+0x128>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d302      	bcc.n	80051de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051d8:	4b21      	ldr	r3, [pc, #132]	; (8005260 <xTaskResumeAll+0x12c>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051de:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <xTaskResumeAll+0x11c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1cb      	bne.n	800517e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051ec:	f000 fb46 	bl	800587c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <xTaskResumeAll+0x130>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051fc:	f000 f846 	bl	800528c <xTaskIncrementTick>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005206:	4b16      	ldr	r3, [pc, #88]	; (8005260 <xTaskResumeAll+0x12c>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3b01      	subs	r3, #1
 8005210:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f1      	bne.n	80051fc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005218:	4b12      	ldr	r3, [pc, #72]	; (8005264 <xTaskResumeAll+0x130>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <xTaskResumeAll+0x12c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005226:	2301      	movs	r3, #1
 8005228:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800522a:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <xTaskResumeAll+0x134>)
 800522c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800523a:	f001 f8b5 	bl	80063a8 <vPortExitCritical>

	return xAlreadyYielded;
 800523e:	68bb      	ldr	r3, [r7, #8]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000be4 	.word	0x20000be4
 800524c:	20000bbc 	.word	0x20000bbc
 8005250:	20000b7c 	.word	0x20000b7c
 8005254:	20000bc4 	.word	0x20000bc4
 8005258:	200006ec 	.word	0x200006ec
 800525c:	200006e8 	.word	0x200006e8
 8005260:	20000bd0 	.word	0x20000bd0
 8005264:	20000bcc 	.word	0x20000bcc
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <xTaskGetTickCount+0x1c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005278:	687b      	ldr	r3, [r7, #4]
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000bc0 	.word	0x20000bc0

0800528c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005296:	4b4e      	ldr	r3, [pc, #312]	; (80053d0 <xTaskIncrementTick+0x144>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	f040 8088 	bne.w	80053b0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052a0:	4b4c      	ldr	r3, [pc, #304]	; (80053d4 <xTaskIncrementTick+0x148>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3301      	adds	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052a8:	4a4a      	ldr	r2, [pc, #296]	; (80053d4 <xTaskIncrementTick+0x148>)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d11f      	bne.n	80052f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80052b4:	4b48      	ldr	r3, [pc, #288]	; (80053d8 <xTaskIncrementTick+0x14c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <xTaskIncrementTick+0x46>
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	e7fe      	b.n	80052d0 <xTaskIncrementTick+0x44>
 80052d2:	4b41      	ldr	r3, [pc, #260]	; (80053d8 <xTaskIncrementTick+0x14c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	4b40      	ldr	r3, [pc, #256]	; (80053dc <xTaskIncrementTick+0x150>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a3e      	ldr	r2, [pc, #248]	; (80053d8 <xTaskIncrementTick+0x14c>)
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	4a3e      	ldr	r2, [pc, #248]	; (80053dc <xTaskIncrementTick+0x150>)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b3e      	ldr	r3, [pc, #248]	; (80053e0 <xTaskIncrementTick+0x154>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3301      	adds	r3, #1
 80052ec:	4a3c      	ldr	r2, [pc, #240]	; (80053e0 <xTaskIncrementTick+0x154>)
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	f000 fac4 	bl	800587c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052f4:	4b3b      	ldr	r3, [pc, #236]	; (80053e4 <xTaskIncrementTick+0x158>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d349      	bcc.n	8005392 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052fe:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <xTaskIncrementTick+0x14c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005308:	4b36      	ldr	r3, [pc, #216]	; (80053e4 <xTaskIncrementTick+0x158>)
 800530a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800530e:	601a      	str	r2, [r3, #0]
					break;
 8005310:	e03f      	b.n	8005392 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005312:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <xTaskIncrementTick+0x14c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	d203      	bcs.n	8005332 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800532a:	4a2e      	ldr	r2, [pc, #184]	; (80053e4 <xTaskIncrementTick+0x158>)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005330:	e02f      	b.n	8005392 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	3304      	adds	r3, #4
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe ffba 	bl	80042b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	3318      	adds	r3, #24
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe ffb1 	bl	80042b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <xTaskIncrementTick+0x15c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d903      	bls.n	8005362 <xTaskIncrementTick+0xd6>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <xTaskIncrementTick+0x15c>)
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4a1f      	ldr	r2, [pc, #124]	; (80053ec <xTaskIncrementTick+0x160>)
 8005370:	441a      	add	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7fe ff3c 	bl	80041f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	4b1b      	ldr	r3, [pc, #108]	; (80053f0 <xTaskIncrementTick+0x164>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	429a      	cmp	r2, r3
 800538a:	d3b8      	bcc.n	80052fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800538c:	2301      	movs	r3, #1
 800538e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005390:	e7b5      	b.n	80052fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <xTaskIncrementTick+0x164>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	4914      	ldr	r1, [pc, #80]	; (80053ec <xTaskIncrementTick+0x160>)
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d907      	bls.n	80053ba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e004      	b.n	80053ba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053b0:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <xTaskIncrementTick+0x168>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3301      	adds	r3, #1
 80053b6:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <xTaskIncrementTick+0x168>)
 80053b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <xTaskIncrementTick+0x16c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80053c2:	2301      	movs	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053c6:	697b      	ldr	r3, [r7, #20]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000be4 	.word	0x20000be4
 80053d4:	20000bc0 	.word	0x20000bc0
 80053d8:	20000b74 	.word	0x20000b74
 80053dc:	20000b78 	.word	0x20000b78
 80053e0:	20000bd4 	.word	0x20000bd4
 80053e4:	20000bdc 	.word	0x20000bdc
 80053e8:	20000bc4 	.word	0x20000bc4
 80053ec:	200006ec 	.word	0x200006ec
 80053f0:	200006e8 	.word	0x200006e8
 80053f4:	20000bcc 	.word	0x20000bcc
 80053f8:	20000bd0 	.word	0x20000bd0

080053fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005402:	4b27      	ldr	r3, [pc, #156]	; (80054a0 <vTaskSwitchContext+0xa4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800540a:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <vTaskSwitchContext+0xa8>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005410:	e040      	b.n	8005494 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005412:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <vTaskSwitchContext+0xa8>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005418:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <vTaskSwitchContext+0xac>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e00f      	b.n	8005440 <vTaskSwitchContext+0x44>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <vTaskSwitchContext+0x3e>
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	607b      	str	r3, [r7, #4]
 8005438:	e7fe      	b.n	8005438 <vTaskSwitchContext+0x3c>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3b01      	subs	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	491a      	ldr	r1, [pc, #104]	; (80054ac <vTaskSwitchContext+0xb0>)
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0e5      	beq.n	8005420 <vTaskSwitchContext+0x24>
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4a13      	ldr	r2, [pc, #76]	; (80054ac <vTaskSwitchContext+0xb0>)
 8005460:	4413      	add	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	3308      	adds	r3, #8
 8005476:	429a      	cmp	r2, r3
 8005478:	d104      	bne.n	8005484 <vTaskSwitchContext+0x88>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <vTaskSwitchContext+0xb4>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	4a06      	ldr	r2, [pc, #24]	; (80054a8 <vTaskSwitchContext+0xac>)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6013      	str	r3, [r2, #0]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	20000be4 	.word	0x20000be4
 80054a4:	20000bd0 	.word	0x20000bd0
 80054a8:	20000bc4 	.word	0x20000bc4
 80054ac:	200006ec 	.word	0x200006ec
 80054b0:	200006e8 	.word	0x200006e8

080054b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <vTaskPlaceOnEventList+0x24>
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e7fe      	b.n	80054d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054d8:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <vTaskPlaceOnEventList+0x44>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3318      	adds	r3, #24
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7fe feac 	bl	800423e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054e6:	2101      	movs	r1, #1
 80054e8:	6838      	ldr	r0, [r7, #0]
 80054ea:	f000 fa71 	bl	80059d0 <prvAddCurrentTaskToDelayedList>
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200006e8 	.word	0x200006e8

080054fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <vTaskPlaceOnEventListRestricted+0x26>
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e7fe      	b.n	8005520 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <vTaskPlaceOnEventListRestricted+0x50>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3318      	adds	r3, #24
 8005528:	4619      	mov	r1, r3
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7fe fe63 	bl	80041f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800553a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	68b8      	ldr	r0, [r7, #8]
 8005540:	f000 fa46 	bl	80059d0 <prvAddCurrentTaskToDelayedList>
	}
 8005544:	bf00      	nop
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	200006e8 	.word	0x200006e8

08005550 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <xTaskRemoveFromEventList+0x2a>
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e7fe      	b.n	8005578 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	3318      	adds	r3, #24
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe fe96 	bl	80042b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005584:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <xTaskRemoveFromEventList+0xac>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d11d      	bne.n	80055c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	3304      	adds	r3, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fe8d 	bl	80042b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4b19      	ldr	r3, [pc, #100]	; (8005600 <xTaskRemoveFromEventList+0xb0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d903      	bls.n	80055aa <xTaskRemoveFromEventList+0x5a>
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	4a16      	ldr	r2, [pc, #88]	; (8005600 <xTaskRemoveFromEventList+0xb0>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4a13      	ldr	r2, [pc, #76]	; (8005604 <xTaskRemoveFromEventList+0xb4>)
 80055b8:	441a      	add	r2, r3
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7fe fe18 	bl	80041f6 <vListInsertEnd>
 80055c6:	e005      	b.n	80055d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	3318      	adds	r3, #24
 80055cc:	4619      	mov	r1, r3
 80055ce:	480e      	ldr	r0, [pc, #56]	; (8005608 <xTaskRemoveFromEventList+0xb8>)
 80055d0:	f7fe fe11 	bl	80041f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <xTaskRemoveFromEventList+0xbc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d905      	bls.n	80055ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055e2:	2301      	movs	r3, #1
 80055e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <xTaskRemoveFromEventList+0xc0>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e001      	b.n	80055f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055f2:	697b      	ldr	r3, [r7, #20]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000be4 	.word	0x20000be4
 8005600:	20000bc4 	.word	0x20000bc4
 8005604:	200006ec 	.word	0x200006ec
 8005608:	20000b7c 	.word	0x20000b7c
 800560c:	200006e8 	.word	0x200006e8
 8005610:	20000bd0 	.word	0x20000bd0

08005614 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <vTaskInternalSetTimeOutState+0x24>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <vTaskInternalSetTimeOutState+0x28>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	605a      	str	r2, [r3, #4]
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20000bd4 	.word	0x20000bd4
 800563c:	20000bc0 	.word	0x20000bc0

08005640 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <xTaskCheckForTimeOut+0x24>
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e7fe      	b.n	8005662 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <xTaskCheckForTimeOut+0x3e>
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	e7fe      	b.n	800567c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800567e:	f000 fe65 	bl	800634c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005682:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <xTaskCheckForTimeOut+0xb8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800569a:	d102      	bne.n	80056a2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800569c:	2300      	movs	r3, #0
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	e023      	b.n	80056ea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4b15      	ldr	r3, [pc, #84]	; (80056fc <xTaskCheckForTimeOut+0xbc>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d007      	beq.n	80056be <xTaskCheckForTimeOut+0x7e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d302      	bcc.n	80056be <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	e015      	b.n	80056ea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d20b      	bcs.n	80056e0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff ff9d 	bl	8005614 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	e004      	b.n	80056ea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056e6:	2301      	movs	r3, #1
 80056e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ea:	f000 fe5d 	bl	80063a8 <vPortExitCritical>

	return xReturn;
 80056ee:	69fb      	ldr	r3, [r7, #28]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000bc0 	.word	0x20000bc0
 80056fc:	20000bd4 	.word	0x20000bd4

08005700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005704:	4b03      	ldr	r3, [pc, #12]	; (8005714 <vTaskMissedYield+0x14>)
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	bf00      	nop
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	20000bd0 	.word	0x20000bd0

08005718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005720:	f000 f852 	bl	80057c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <prvIdleTask+0x28>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d9f9      	bls.n	8005720 <prvIdleTask+0x8>
			{
				taskYIELD();
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <prvIdleTask+0x2c>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800573c:	e7f0      	b.n	8005720 <prvIdleTask+0x8>
 800573e:	bf00      	nop
 8005740:	200006ec 	.word	0x200006ec
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	e00c      	b.n	800576e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4a12      	ldr	r2, [pc, #72]	; (80057a8 <prvInitialiseTaskLists+0x60>)
 8005760:	4413      	add	r3, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fd1a 	bl	800419c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3301      	adds	r3, #1
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b37      	cmp	r3, #55	; 0x37
 8005772:	d9ef      	bls.n	8005754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005774:	480d      	ldr	r0, [pc, #52]	; (80057ac <prvInitialiseTaskLists+0x64>)
 8005776:	f7fe fd11 	bl	800419c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800577a:	480d      	ldr	r0, [pc, #52]	; (80057b0 <prvInitialiseTaskLists+0x68>)
 800577c:	f7fe fd0e 	bl	800419c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005780:	480c      	ldr	r0, [pc, #48]	; (80057b4 <prvInitialiseTaskLists+0x6c>)
 8005782:	f7fe fd0b 	bl	800419c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005786:	480c      	ldr	r0, [pc, #48]	; (80057b8 <prvInitialiseTaskLists+0x70>)
 8005788:	f7fe fd08 	bl	800419c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800578c:	480b      	ldr	r0, [pc, #44]	; (80057bc <prvInitialiseTaskLists+0x74>)
 800578e:	f7fe fd05 	bl	800419c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005792:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <prvInitialiseTaskLists+0x78>)
 8005794:	4a05      	ldr	r2, [pc, #20]	; (80057ac <prvInitialiseTaskLists+0x64>)
 8005796:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <prvInitialiseTaskLists+0x7c>)
 800579a:	4a05      	ldr	r2, [pc, #20]	; (80057b0 <prvInitialiseTaskLists+0x68>)
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	200006ec 	.word	0x200006ec
 80057ac:	20000b4c 	.word	0x20000b4c
 80057b0:	20000b60 	.word	0x20000b60
 80057b4:	20000b7c 	.word	0x20000b7c
 80057b8:	20000b90 	.word	0x20000b90
 80057bc:	20000ba8 	.word	0x20000ba8
 80057c0:	20000b74 	.word	0x20000b74
 80057c4:	20000b78 	.word	0x20000b78

080057c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ce:	e019      	b.n	8005804 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057d0:	f000 fdbc 	bl	800634c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <prvCheckTasksWaitingTermination+0x4c>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fd65 	bl	80042b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <prvCheckTasksWaitingTermination+0x50>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <prvCheckTasksWaitingTermination+0x50>)
 80057ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <prvCheckTasksWaitingTermination+0x54>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	4a09      	ldr	r2, [pc, #36]	; (800581c <prvCheckTasksWaitingTermination+0x54>)
 80057f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057fa:	f000 fdd5 	bl	80063a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f80e 	bl	8005820 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <prvCheckTasksWaitingTermination+0x54>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e1      	bne.n	80057d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000b90 	.word	0x20000b90
 8005818:	20000bbc 	.word	0x20000bbc
 800581c:	20000ba4 	.word	0x20000ba4

08005820 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800582e:	2b00      	cmp	r3, #0
 8005830:	d108      	bne.n	8005844 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	4618      	mov	r0, r3
 8005838:	f000 ff64 	bl	8006704 <vPortFree>
				vPortFree( pxTCB );
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 ff61 	bl	8006704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005842:	e017      	b.n	8005874 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800584a:	2b01      	cmp	r3, #1
 800584c:	d103      	bne.n	8005856 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 ff58 	bl	8006704 <vPortFree>
	}
 8005854:	e00e      	b.n	8005874 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800585c:	2b02      	cmp	r3, #2
 800585e:	d009      	beq.n	8005874 <prvDeleteTCB+0x54>
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	e7fe      	b.n	8005872 <prvDeleteTCB+0x52>
	}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <prvResetNextTaskUnblockTime+0x38>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800588c:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <prvResetNextTaskUnblockTime+0x3c>)
 800588e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005892:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005894:	e008      	b.n	80058a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <prvResetNextTaskUnblockTime+0x38>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4a04      	ldr	r2, [pc, #16]	; (80058b8 <prvResetNextTaskUnblockTime+0x3c>)
 80058a6:	6013      	str	r3, [r2, #0]
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	20000b74 	.word	0x20000b74
 80058b8:	20000bdc 	.word	0x20000bdc

080058bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <xTaskGetSchedulerState+0x34>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058ca:	2301      	movs	r3, #1
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	e008      	b.n	80058e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <xTaskGetSchedulerState+0x38>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058d8:	2302      	movs	r3, #2
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	e001      	b.n	80058e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058de:	2300      	movs	r3, #0
 80058e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058e2:	687b      	ldr	r3, [r7, #4]
	}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	20000bc8 	.word	0x20000bc8
 80058f4:	20000be4 	.word	0x20000be4

080058f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d054      	beq.n	80059b8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800590e:	4b2d      	ldr	r3, [pc, #180]	; (80059c4 <xTaskPriorityDisinherit+0xcc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	d009      	beq.n	800592c <xTaskPriorityDisinherit+0x34>
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	e7fe      	b.n	800592a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <xTaskPriorityDisinherit+0x50>
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	e7fe      	b.n	8005946 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	1e5a      	subs	r2, r3, #1
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595a:	429a      	cmp	r2, r3
 800595c:	d02c      	beq.n	80059b8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005962:	2b00      	cmp	r3, #0
 8005964:	d128      	bne.n	80059b8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	3304      	adds	r3, #4
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fca0 	bl	80042b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <xTaskPriorityDisinherit+0xd0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d903      	bls.n	8005998 <xTaskPriorityDisinherit+0xa0>
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4a0c      	ldr	r2, [pc, #48]	; (80059c8 <xTaskPriorityDisinherit+0xd0>)
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4a09      	ldr	r2, [pc, #36]	; (80059cc <xTaskPriorityDisinherit+0xd4>)
 80059a6:	441a      	add	r2, r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4619      	mov	r1, r3
 80059ae:	4610      	mov	r0, r2
 80059b0:	f7fe fc21 	bl	80041f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059b8:	697b      	ldr	r3, [r7, #20]
	}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	200006e8 	.word	0x200006e8
 80059c8:	20000bc4 	.word	0x20000bc4
 80059cc:	200006ec 	.word	0x200006ec

080059d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059da:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <prvAddCurrentTaskToDelayedList+0x90>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059e0:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <prvAddCurrentTaskToDelayedList+0x94>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fc62 	bl	80042b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059f2:	d10a      	bne.n	8005a0a <prvAddCurrentTaskToDelayedList+0x3a>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059fa:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <prvAddCurrentTaskToDelayedList+0x94>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4619      	mov	r1, r3
 8005a02:	4819      	ldr	r0, [pc, #100]	; (8005a68 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a04:	f7fe fbf7 	bl	80041f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a08:	e026      	b.n	8005a58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a12:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d209      	bcs.n	8005a36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f7fe fc05 	bl	800423e <vListInsert>
}
 8005a34:	e010      	b.n	8005a58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f7fe fbfb 	bl	800423e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d202      	bcs.n	8005a58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a52:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6013      	str	r3, [r2, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000bc0 	.word	0x20000bc0
 8005a64:	200006e8 	.word	0x200006e8
 8005a68:	20000ba8 	.word	0x20000ba8
 8005a6c:	20000b78 	.word	0x20000b78
 8005a70:	20000b74 	.word	0x20000b74
 8005a74:	20000bdc 	.word	0x20000bdc

08005a78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a82:	f000 faff 	bl	8006084 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a86:	4b1c      	ldr	r3, [pc, #112]	; (8005af8 <xTimerCreateTimerTask+0x80>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d021      	beq.n	8005ad2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a96:	1d3a      	adds	r2, r7, #4
 8005a98:	f107 0108 	add.w	r1, r7, #8
 8005a9c:	f107 030c 	add.w	r3, r7, #12
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe fb61 	bl	8004168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	9202      	str	r2, [sp, #8]
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	4910      	ldr	r1, [pc, #64]	; (8005afc <xTimerCreateTimerTask+0x84>)
 8005aba:	4811      	ldr	r0, [pc, #68]	; (8005b00 <xTimerCreateTimerTask+0x88>)
 8005abc:	f7ff f8f6 	bl	8004cac <xTaskCreateStatic>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <xTimerCreateTimerTask+0x8c>)
 8005ac4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <xTimerCreateTimerTask+0x8c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d109      	bne.n	8005aec <xTimerCreateTimerTask+0x74>
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	e7fe      	b.n	8005aea <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005aec:	697b      	ldr	r3, [r7, #20]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000c18 	.word	0x20000c18
 8005afc:	080069dc 	.word	0x080069dc
 8005b00:	08005c39 	.word	0x08005c39
 8005b04:	20000c1c 	.word	0x20000c1c

08005b08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	; 0x28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <xTimerGenericCommand+0x2c>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	e7fe      	b.n	8005b32 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b34:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <xTimerGenericCommand+0x94>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d02a      	beq.n	8005b92 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b05      	cmp	r3, #5
 8005b4c:	dc18      	bgt.n	8005b80 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b4e:	f7ff feb5 	bl	80058bc <xTaskGetSchedulerState>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d109      	bne.n	8005b6c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <xTimerGenericCommand+0x94>)
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	f107 0110 	add.w	r1, r7, #16
 8005b60:	2300      	movs	r3, #0
 8005b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b64:	f7fe fccc 	bl	8004500 <xQueueGenericSend>
 8005b68:	6278      	str	r0, [r7, #36]	; 0x24
 8005b6a:	e012      	b.n	8005b92 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <xTimerGenericCommand+0x94>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	f107 0110 	add.w	r1, r7, #16
 8005b74:	2300      	movs	r3, #0
 8005b76:	2200      	movs	r2, #0
 8005b78:	f7fe fcc2 	bl	8004500 <xQueueGenericSend>
 8005b7c:	6278      	str	r0, [r7, #36]	; 0x24
 8005b7e:	e008      	b.n	8005b92 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b80:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <xTimerGenericCommand+0x94>)
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	f107 0110 	add.w	r1, r7, #16
 8005b88:	2300      	movs	r3, #0
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	f7fe fdb2 	bl	80046f4 <xQueueGenericSendFromISR>
 8005b90:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3728      	adds	r7, #40	; 0x28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000c18 	.word	0x20000c18

08005ba0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005baa:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <prvProcessExpiredTimer+0x94>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fb79 	bl	80042b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d021      	beq.n	8005c10 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	18d1      	adds	r1, r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	6978      	ldr	r0, [r7, #20]
 8005bda:	f000 f8d1 	bl	8005d80 <prvInsertTimerInActiveList>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01e      	beq.n	8005c22 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005be4:	2300      	movs	r3, #0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	2300      	movs	r3, #0
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	2100      	movs	r1, #0
 8005bee:	6978      	ldr	r0, [r7, #20]
 8005bf0:	f7ff ff8a 	bl	8005b08 <xTimerGenericCommand>
 8005bf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d112      	bne.n	8005c22 <prvProcessExpiredTimer+0x82>
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	e7fe      	b.n	8005c0e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	4798      	blx	r3
}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000c10 	.word	0x20000c10

08005c38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c40:	f107 0308 	add.w	r3, r7, #8
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 f857 	bl	8005cf8 <prvGetNextExpireTime>
 8005c4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f803 	bl	8005c5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c56:	f000 f8d5 	bl	8005e04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c5a:	e7f1      	b.n	8005c40 <prvTimerTask+0x8>

08005c5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c66:	f7ff fa57 	bl	8005118 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c6a:	f107 0308 	add.w	r3, r7, #8
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f866 	bl	8005d40 <prvSampleTimeNow>
 8005c74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d130      	bne.n	8005cde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <prvProcessTimerOrBlockTask+0x3c>
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d806      	bhi.n	8005c98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c8a:	f7ff fa53 	bl	8005134 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff ff85 	bl	8005ba0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c96:	e024      	b.n	8005ce2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c9e:	4b13      	ldr	r3, [pc, #76]	; (8005cec <prvProcessTimerOrBlockTask+0x90>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <prvProcessTimerOrBlockTask+0x50>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <prvProcessTimerOrBlockTask+0x52>
 8005cac:	2300      	movs	r3, #0
 8005cae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <prvProcessTimerOrBlockTask+0x94>)
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f7fe ffc1 	bl	8004c44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cc2:	f7ff fa37 	bl	8005134 <xTaskResumeAll>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <prvProcessTimerOrBlockTask+0x98>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
}
 8005cdc:	e001      	b.n	8005ce2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cde:	f7ff fa29 	bl	8005134 <xTaskResumeAll>
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000c14 	.word	0x20000c14
 8005cf0:	20000c18 	.word	0x20000c18
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d00:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <prvGetNextExpireTime+0x44>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <prvGetNextExpireTime+0x16>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	e000      	b.n	8005d10 <prvGetNextExpireTime+0x18>
 8005d0e:	2200      	movs	r2, #0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d105      	bne.n	8005d28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d1c:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <prvGetNextExpireTime+0x44>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e001      	b.n	8005d2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000c10 	.word	0x20000c10

08005d40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d48:	f7ff fa90 	bl	800526c <xTaskGetTickCount>
 8005d4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <prvSampleTimeNow+0x3c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d205      	bcs.n	8005d64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d58:	f000 f930 	bl	8005fbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	e002      	b.n	8005d6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d6a:	4a04      	ldr	r2, [pc, #16]	; (8005d7c <prvSampleTimeNow+0x3c>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d70:	68fb      	ldr	r3, [r7, #12]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000c20 	.word	0x20000c20

08005d80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d812      	bhi.n	8005dcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	1ad2      	subs	r2, r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e01b      	b.n	8005df2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005dba:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <prvInsertTimerInActiveList+0x7c>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f7fe fa3a 	bl	800423e <vListInsert>
 8005dca:	e012      	b.n	8005df2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d206      	bcs.n	8005de2 <prvInsertTimerInActiveList+0x62>
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d302      	bcc.n	8005de2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e007      	b.n	8005df2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005de2:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <prvInsertTimerInActiveList+0x80>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7fe fa26 	bl	800423e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005df2:	697b      	ldr	r3, [r7, #20]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000c14 	.word	0x20000c14
 8005e00:	20000c10 	.word	0x20000c10

08005e04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08e      	sub	sp, #56	; 0x38
 8005e08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e0a:	e0c6      	b.n	8005f9a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	da17      	bge.n	8005e42 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e12:	1d3b      	adds	r3, r7, #4
 8005e14:	3304      	adds	r3, #4
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <prvProcessReceivedCommands+0x2e>
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e7fe      	b.n	8005e30 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e38:	6850      	ldr	r0, [r2, #4]
 8005e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3c:	6892      	ldr	r2, [r2, #8]
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f2c0 80a7 	blt.w	8005f98 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe fa28 	bl	80042b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e60:	463b      	mov	r3, r7
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff ff6c 	bl	8005d40 <prvSampleTimeNow>
 8005e68:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b09      	cmp	r3, #9
 8005e6e:	f200 8094 	bhi.w	8005f9a <prvProcessReceivedCommands+0x196>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <prvProcessReceivedCommands+0x74>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea1 	.word	0x08005ea1
 8005e84:	08005f13 	.word	0x08005f13
 8005e88:	08005f27 	.word	0x08005f27
 8005e8c:	08005f6f 	.word	0x08005f6f
 8005e90:	08005ea1 	.word	0x08005ea1
 8005e94:	08005ea1 	.word	0x08005ea1
 8005e98:	08005f13 	.word	0x08005f13
 8005e9c:	08005f27 	.word	0x08005f27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	18d1      	adds	r1, r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec0:	f7ff ff5e 	bl	8005d80 <prvInsertTimerInActiveList>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d067      	beq.n	8005f9a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ed0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d05c      	beq.n	8005f9a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	441a      	add	r2, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	2300      	movs	r3, #0
 8005eee:	2100      	movs	r1, #0
 8005ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef2:	f7ff fe09 	bl	8005b08 <xTimerGenericCommand>
 8005ef6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d14d      	bne.n	8005f9a <prvProcessReceivedCommands+0x196>
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	61bb      	str	r3, [r7, #24]
 8005f10:	e7fe      	b.n	8005f10 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005f24:	e039      	b.n	8005f9a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <prvProcessReceivedCommands+0x156>
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e7fe      	b.n	8005f58 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	18d1      	adds	r1, r2, r3
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f68:	f7ff ff0a 	bl	8005d80 <prvInsertTimerInActiveList>
					break;
 8005f6c:	e015      	b.n	8005f9a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f7e:	f000 fbc1 	bl	8006704 <vPortFree>
 8005f82:	e00a      	b.n	8005f9a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f96:	e000      	b.n	8005f9a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f9a:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <prvProcessReceivedCommands+0x1b4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	1d39      	adds	r1, r7, #4
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe fc3a 	bl	800481c <xQueueReceive>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f47f af2e 	bne.w	8005e0c <prvProcessReceivedCommands+0x8>
	}
}
 8005fb0:	bf00      	nop
 8005fb2:	3730      	adds	r7, #48	; 0x30
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20000c18 	.word	0x20000c18

08005fbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fc2:	e047      	b.n	8006054 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fc4:	4b2d      	ldr	r3, [pc, #180]	; (800607c <prvSwitchTimerLists+0xc0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fce:	4b2b      	ldr	r3, [pc, #172]	; (800607c <prvSwitchTimerLists+0xc0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe f967 	bl	80042b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02d      	beq.n	8006054 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	429a      	cmp	r2, r3
 8006008:	d90e      	bls.n	8006028 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006016:	4b19      	ldr	r3, [pc, #100]	; (800607c <prvSwitchTimerLists+0xc0>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3304      	adds	r3, #4
 800601e:	4619      	mov	r1, r3
 8006020:	4610      	mov	r0, r2
 8006022:	f7fe f90c 	bl	800423e <vListInsert>
 8006026:	e015      	b.n	8006054 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006028:	2300      	movs	r3, #0
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2300      	movs	r3, #0
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	2100      	movs	r1, #0
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff fd68 	bl	8005b08 <xTimerGenericCommand>
 8006038:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d109      	bne.n	8006054 <prvSwitchTimerLists+0x98>
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	603b      	str	r3, [r7, #0]
 8006052:	e7fe      	b.n	8006052 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006054:	4b09      	ldr	r3, [pc, #36]	; (800607c <prvSwitchTimerLists+0xc0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1b2      	bne.n	8005fc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800605e:	4b07      	ldr	r3, [pc, #28]	; (800607c <prvSwitchTimerLists+0xc0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <prvSwitchTimerLists+0xc4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a04      	ldr	r2, [pc, #16]	; (800607c <prvSwitchTimerLists+0xc0>)
 800606a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800606c:	4a04      	ldr	r2, [pc, #16]	; (8006080 <prvSwitchTimerLists+0xc4>)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	6013      	str	r3, [r2, #0]
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000c10 	.word	0x20000c10
 8006080:	20000c14 	.word	0x20000c14

08006084 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800608a:	f000 f95f 	bl	800634c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800608e:	4b15      	ldr	r3, [pc, #84]	; (80060e4 <prvCheckForValidListAndQueue+0x60>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d120      	bne.n	80060d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006096:	4814      	ldr	r0, [pc, #80]	; (80060e8 <prvCheckForValidListAndQueue+0x64>)
 8006098:	f7fe f880 	bl	800419c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800609c:	4813      	ldr	r0, [pc, #76]	; (80060ec <prvCheckForValidListAndQueue+0x68>)
 800609e:	f7fe f87d 	bl	800419c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060a2:	4b13      	ldr	r3, [pc, #76]	; (80060f0 <prvCheckForValidListAndQueue+0x6c>)
 80060a4:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <prvCheckForValidListAndQueue+0x64>)
 80060a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060a8:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <prvCheckForValidListAndQueue+0x70>)
 80060aa:	4a10      	ldr	r2, [pc, #64]	; (80060ec <prvCheckForValidListAndQueue+0x68>)
 80060ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060ae:	2300      	movs	r3, #0
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <prvCheckForValidListAndQueue+0x74>)
 80060b4:	4a11      	ldr	r2, [pc, #68]	; (80060fc <prvCheckForValidListAndQueue+0x78>)
 80060b6:	2110      	movs	r1, #16
 80060b8:	200a      	movs	r0, #10
 80060ba:	f7fe f98b 	bl	80043d4 <xQueueGenericCreateStatic>
 80060be:	4602      	mov	r2, r0
 80060c0:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <prvCheckForValidListAndQueue+0x60>)
 80060c2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060c4:	4b07      	ldr	r3, [pc, #28]	; (80060e4 <prvCheckForValidListAndQueue+0x60>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <prvCheckForValidListAndQueue+0x60>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	490b      	ldr	r1, [pc, #44]	; (8006100 <prvCheckForValidListAndQueue+0x7c>)
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe fd8e 	bl	8004bf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060d8:	f000 f966 	bl	80063a8 <vPortExitCritical>
}
 80060dc:	bf00      	nop
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20000c18 	.word	0x20000c18
 80060e8:	20000be8 	.word	0x20000be8
 80060ec:	20000bfc 	.word	0x20000bfc
 80060f0:	20000c10 	.word	0x20000c10
 80060f4:	20000c14 	.word	0x20000c14
 80060f8:	20000cc4 	.word	0x20000cc4
 80060fc:	20000c24 	.word	0x20000c24
 8006100:	080069e4 	.word	0x080069e4

08006104 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3b04      	subs	r3, #4
 8006114:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800611c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3b04      	subs	r3, #4
 8006122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f023 0201 	bic.w	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3b04      	subs	r3, #4
 8006132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006134:	4a0c      	ldr	r2, [pc, #48]	; (8006168 <pxPortInitialiseStack+0x64>)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3b14      	subs	r3, #20
 800613e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3b04      	subs	r3, #4
 800614a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f06f 0202 	mvn.w	r2, #2
 8006152:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3b20      	subs	r3, #32
 8006158:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800615a:	68fb      	ldr	r3, [r7, #12]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	0800616d 	.word	0x0800616d

0800616c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006176:	4b11      	ldr	r3, [pc, #68]	; (80061bc <prvTaskExitError+0x50>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800617e:	d009      	beq.n	8006194 <prvTaskExitError+0x28>
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e7fe      	b.n	8006192 <prvTaskExitError+0x26>
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061a6:	bf00      	nop
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0fc      	beq.n	80061a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061ae:	bf00      	nop
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	2000000c 	.word	0x2000000c

080061c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <pxCurrentTCBConst2>)
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	f380 8809 	msr	PSP, r0
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8811 	msr	BASEPRI, r0
 80061da:	4770      	bx	lr
 80061dc:	f3af 8000 	nop.w

080061e0 <pxCurrentTCBConst2>:
 80061e0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061e8:	4808      	ldr	r0, [pc, #32]	; (800620c <prvPortStartFirstTask+0x24>)
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	6800      	ldr	r0, [r0, #0]
 80061ee:	f380 8808 	msr	MSP, r0
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8814 	msr	CONTROL, r0
 80061fa:	b662      	cpsie	i
 80061fc:	b661      	cpsie	f
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	df00      	svc	0
 8006208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800620a:	bf00      	nop
 800620c:	e000ed08 	.word	0xe000ed08

08006210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006216:	4b44      	ldr	r3, [pc, #272]	; (8006328 <xPortStartScheduler+0x118>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a44      	ldr	r2, [pc, #272]	; (800632c <xPortStartScheduler+0x11c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d109      	bne.n	8006234 <xPortStartScheduler+0x24>
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	e7fe      	b.n	8006232 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006234:	4b3c      	ldr	r3, [pc, #240]	; (8006328 <xPortStartScheduler+0x118>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a3d      	ldr	r2, [pc, #244]	; (8006330 <xPortStartScheduler+0x120>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d109      	bne.n	8006252 <xPortStartScheduler+0x42>
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e7fe      	b.n	8006250 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006252:	4b38      	ldr	r3, [pc, #224]	; (8006334 <xPortStartScheduler+0x124>)
 8006254:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	22ff      	movs	r2, #255	; 0xff
 8006262:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006274:	b2da      	uxtb	r2, r3
 8006276:	4b30      	ldr	r3, [pc, #192]	; (8006338 <xPortStartScheduler+0x128>)
 8006278:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800627a:	4b30      	ldr	r3, [pc, #192]	; (800633c <xPortStartScheduler+0x12c>)
 800627c:	2207      	movs	r2, #7
 800627e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006280:	e009      	b.n	8006296 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006282:	4b2e      	ldr	r3, [pc, #184]	; (800633c <xPortStartScheduler+0x12c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3b01      	subs	r3, #1
 8006288:	4a2c      	ldr	r2, [pc, #176]	; (800633c <xPortStartScheduler+0x12c>)
 800628a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	b2db      	uxtb	r3, r3
 8006294:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006296:	78fb      	ldrb	r3, [r7, #3]
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b80      	cmp	r3, #128	; 0x80
 80062a0:	d0ef      	beq.n	8006282 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062a2:	4b26      	ldr	r3, [pc, #152]	; (800633c <xPortStartScheduler+0x12c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1c3 0307 	rsb	r3, r3, #7
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d009      	beq.n	80062c2 <xPortStartScheduler+0xb2>
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	60bb      	str	r3, [r7, #8]
 80062c0:	e7fe      	b.n	80062c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062c2:	4b1e      	ldr	r3, [pc, #120]	; (800633c <xPortStartScheduler+0x12c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	4a1c      	ldr	r2, [pc, #112]	; (800633c <xPortStartScheduler+0x12c>)
 80062ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062cc:	4b1b      	ldr	r3, [pc, #108]	; (800633c <xPortStartScheduler+0x12c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062d4:	4a19      	ldr	r2, [pc, #100]	; (800633c <xPortStartScheduler+0x12c>)
 80062d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062e0:	4b17      	ldr	r3, [pc, #92]	; (8006340 <xPortStartScheduler+0x130>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a16      	ldr	r2, [pc, #88]	; (8006340 <xPortStartScheduler+0x130>)
 80062e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062ec:	4b14      	ldr	r3, [pc, #80]	; (8006340 <xPortStartScheduler+0x130>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a13      	ldr	r2, [pc, #76]	; (8006340 <xPortStartScheduler+0x130>)
 80062f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062f8:	f000 f8d6 	bl	80064a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <xPortStartScheduler+0x134>)
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006302:	f000 f8f5 	bl	80064f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006306:	4b10      	ldr	r3, [pc, #64]	; (8006348 <xPortStartScheduler+0x138>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a0f      	ldr	r2, [pc, #60]	; (8006348 <xPortStartScheduler+0x138>)
 800630c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006310:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006312:	f7ff ff69 	bl	80061e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006316:	f7ff f871 	bl	80053fc <vTaskSwitchContext>
	prvTaskExitError();
 800631a:	f7ff ff27 	bl	800616c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed00 	.word	0xe000ed00
 800632c:	410fc271 	.word	0x410fc271
 8006330:	410fc270 	.word	0x410fc270
 8006334:	e000e400 	.word	0xe000e400
 8006338:	20000d14 	.word	0x20000d14
 800633c:	20000d18 	.word	0x20000d18
 8006340:	e000ed20 	.word	0xe000ed20
 8006344:	2000000c 	.word	0x2000000c
 8006348:	e000ef34 	.word	0xe000ef34

0800634c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006364:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <vPortEnterCritical+0x54>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	4a0d      	ldr	r2, [pc, #52]	; (80063a0 <vPortEnterCritical+0x54>)
 800636c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800636e:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <vPortEnterCritical+0x54>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d10e      	bne.n	8006394 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <vPortEnterCritical+0x58>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <vPortEnterCritical+0x48>
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	e7fe      	b.n	8006392 <vPortEnterCritical+0x46>
	}
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	2000000c 	.word	0x2000000c
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <vPortExitCritical+0x4c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <vPortExitCritical+0x22>
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	e7fe      	b.n	80063c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80063ca:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <vPortExitCritical+0x4c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <vPortExitCritical+0x4c>)
 80063d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <vPortExitCritical+0x4c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <vPortExitCritical+0x3e>
 80063dc:	2300      	movs	r3, #0
 80063de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	2000000c 	.word	0x2000000c
	...

08006400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006400:	f3ef 8009 	mrs	r0, PSP
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	4b15      	ldr	r3, [pc, #84]	; (8006460 <pxCurrentTCBConst>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f01e 0f10 	tst.w	lr, #16
 8006410:	bf08      	it	eq
 8006412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641a:	6010      	str	r0, [r2, #0]
 800641c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006424:	f380 8811 	msr	BASEPRI, r0
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f7fe ffe4 	bl	80053fc <vTaskSwitchContext>
 8006434:	f04f 0000 	mov.w	r0, #0
 8006438:	f380 8811 	msr	BASEPRI, r0
 800643c:	bc09      	pop	{r0, r3}
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	6808      	ldr	r0, [r1, #0]
 8006442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006446:	f01e 0f10 	tst.w	lr, #16
 800644a:	bf08      	it	eq
 800644c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006450:	f380 8809 	msr	PSP, r0
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	f3af 8000 	nop.w

08006460 <pxCurrentTCBConst>:
 8006460:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop

08006468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006480:	f7fe ff04 	bl	800528c <xTaskIncrementTick>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <SysTick_Handler+0x3c>)
 800648c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	2300      	movs	r3, #0
 8006494:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064ac:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <vPortSetupTimerInterrupt+0x34>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064b2:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <vPortSetupTimerInterrupt+0x38>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <vPortSetupTimerInterrupt+0x3c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a0a      	ldr	r2, [pc, #40]	; (80064e8 <vPortSetupTimerInterrupt+0x40>)
 80064be:	fba2 2303 	umull	r2, r3, r2, r3
 80064c2:	099b      	lsrs	r3, r3, #6
 80064c4:	4a09      	ldr	r2, [pc, #36]	; (80064ec <vPortSetupTimerInterrupt+0x44>)
 80064c6:	3b01      	subs	r3, #1
 80064c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ca:	4b04      	ldr	r3, [pc, #16]	; (80064dc <vPortSetupTimerInterrupt+0x34>)
 80064cc:	2207      	movs	r2, #7
 80064ce:	601a      	str	r2, [r3, #0]
}
 80064d0:	bf00      	nop
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	e000e010 	.word	0xe000e010
 80064e0:	e000e018 	.word	0xe000e018
 80064e4:	20000000 	.word	0x20000000
 80064e8:	10624dd3 	.word	0x10624dd3
 80064ec:	e000e014 	.word	0xe000e014

080064f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006500 <vPortEnableVFP+0x10>
 80064f4:	6801      	ldr	r1, [r0, #0]
 80064f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064fa:	6001      	str	r1, [r0, #0]
 80064fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064fe:	bf00      	nop
 8006500:	e000ed88 	.word	0xe000ed88

08006504 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800650a:	f3ef 8305 	mrs	r3, IPSR
 800650e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b0f      	cmp	r3, #15
 8006514:	d913      	bls.n	800653e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006516:	4a16      	ldr	r2, [pc, #88]	; (8006570 <vPortValidateInterruptPriority+0x6c>)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <vPortValidateInterruptPriority+0x70>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	7afa      	ldrb	r2, [r7, #11]
 8006526:	429a      	cmp	r2, r3
 8006528:	d209      	bcs.n	800653e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	607b      	str	r3, [r7, #4]
 800653c:	e7fe      	b.n	800653c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800653e:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <vPortValidateInterruptPriority+0x74>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <vPortValidateInterruptPriority+0x78>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d909      	bls.n	8006562 <vPortValidateInterruptPriority+0x5e>
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	e7fe      	b.n	8006560 <vPortValidateInterruptPriority+0x5c>
	}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	e000e3f0 	.word	0xe000e3f0
 8006574:	20000d14 	.word	0x20000d14
 8006578:	e000ed0c 	.word	0xe000ed0c
 800657c:	20000d18 	.word	0x20000d18

08006580 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	; 0x28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006588:	2300      	movs	r3, #0
 800658a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800658c:	f7fe fdc4 	bl	8005118 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006590:	4b57      	ldr	r3, [pc, #348]	; (80066f0 <pvPortMalloc+0x170>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006598:	f000 f90c 	bl	80067b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800659c:	4b55      	ldr	r3, [pc, #340]	; (80066f4 <pvPortMalloc+0x174>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4013      	ands	r3, r2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 808c 	bne.w	80066c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01c      	beq.n	80065ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80065b0:	2208      	movs	r2, #8
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f023 0307 	bic.w	r3, r3, #7
 80065c8:	3308      	adds	r3, #8
 80065ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <pvPortMalloc+0x6a>
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e7fe      	b.n	80065e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d068      	beq.n	80066c2 <pvPortMalloc+0x142>
 80065f0:	4b41      	ldr	r3, [pc, #260]	; (80066f8 <pvPortMalloc+0x178>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d863      	bhi.n	80066c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065fa:	4b40      	ldr	r3, [pc, #256]	; (80066fc <pvPortMalloc+0x17c>)
 80065fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065fe:	4b3f      	ldr	r3, [pc, #252]	; (80066fc <pvPortMalloc+0x17c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006604:	e004      	b.n	8006610 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	429a      	cmp	r2, r3
 8006618:	d903      	bls.n	8006622 <pvPortMalloc+0xa2>
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f1      	bne.n	8006606 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006622:	4b33      	ldr	r3, [pc, #204]	; (80066f0 <pvPortMalloc+0x170>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006628:	429a      	cmp	r2, r3
 800662a:	d04a      	beq.n	80066c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2208      	movs	r2, #8
 8006632:	4413      	add	r3, r2
 8006634:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	1ad2      	subs	r2, r2, r3
 8006646:	2308      	movs	r3, #8
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	429a      	cmp	r2, r3
 800664c:	d91e      	bls.n	800668c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800664e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4413      	add	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <pvPortMalloc+0xf4>
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	e7fe      	b.n	8006672 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006686:	69b8      	ldr	r0, [r7, #24]
 8006688:	f000 f8f6 	bl	8006878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800668c:	4b1a      	ldr	r3, [pc, #104]	; (80066f8 <pvPortMalloc+0x178>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <pvPortMalloc+0x178>)
 8006698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800669a:	4b17      	ldr	r3, [pc, #92]	; (80066f8 <pvPortMalloc+0x178>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b18      	ldr	r3, [pc, #96]	; (8006700 <pvPortMalloc+0x180>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d203      	bcs.n	80066ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066a6:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <pvPortMalloc+0x178>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a15      	ldr	r2, [pc, #84]	; (8006700 <pvPortMalloc+0x180>)
 80066ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <pvPortMalloc+0x174>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066c2:	f7fe fd37 	bl	8005134 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <pvPortMalloc+0x164>
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e7fe      	b.n	80066e2 <pvPortMalloc+0x162>
	return pvReturn;
 80066e4:	69fb      	ldr	r3, [r7, #28]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3728      	adds	r7, #40	; 0x28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20001924 	.word	0x20001924
 80066f4:	20001930 	.word	0x20001930
 80066f8:	20001928 	.word	0x20001928
 80066fc:	2000191c 	.word	0x2000191c
 8006700:	2000192c 	.word	0x2000192c

08006704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d046      	beq.n	80067a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006716:	2308      	movs	r3, #8
 8006718:	425b      	negs	r3, r3
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	4b20      	ldr	r3, [pc, #128]	; (80067ac <vPortFree+0xa8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4013      	ands	r3, r2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <vPortFree+0x42>
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e7fe      	b.n	8006744 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d009      	beq.n	8006762 <vPortFree+0x5e>
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	e7fe      	b.n	8006760 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	4b11      	ldr	r3, [pc, #68]	; (80067ac <vPortFree+0xa8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d019      	beq.n	80067a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d115      	bne.n	80067a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <vPortFree+0xa8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	43db      	mvns	r3, r3
 8006782:	401a      	ands	r2, r3
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006788:	f7fe fcc6 	bl	8005118 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <vPortFree+0xac>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4413      	add	r3, r2
 8006796:	4a06      	ldr	r2, [pc, #24]	; (80067b0 <vPortFree+0xac>)
 8006798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800679a:	6938      	ldr	r0, [r7, #16]
 800679c:	f000 f86c 	bl	8006878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80067a0:	f7fe fcc8 	bl	8005134 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067a4:	bf00      	nop
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20001930 	.word	0x20001930
 80067b0:	20001928 	.word	0x20001928

080067b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80067be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067c0:	4b27      	ldr	r3, [pc, #156]	; (8006860 <prvHeapInit+0xac>)
 80067c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3307      	adds	r3, #7
 80067d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <prvHeapInit+0xac>)
 80067e4:	4413      	add	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067ec:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <prvHeapInit+0xb0>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067f2:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <prvHeapInit+0xb0>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4413      	add	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006800:	2208      	movs	r2, #8
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0307 	bic.w	r3, r3, #7
 800680e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a15      	ldr	r2, [pc, #84]	; (8006868 <prvHeapInit+0xb4>)
 8006814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <prvHeapInit+0xb4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800681e:	4b12      	ldr	r3, [pc, #72]	; (8006868 <prvHeapInit+0xb4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006834:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <prvHeapInit+0xb4>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <prvHeapInit+0xb8>)
 8006842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <prvHeapInit+0xbc>)
 800684a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800684c:	4b09      	ldr	r3, [pc, #36]	; (8006874 <prvHeapInit+0xc0>)
 800684e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	20000d1c 	.word	0x20000d1c
 8006864:	2000191c 	.word	0x2000191c
 8006868:	20001924 	.word	0x20001924
 800686c:	2000192c 	.word	0x2000192c
 8006870:	20001928 	.word	0x20001928
 8006874:	20001930 	.word	0x20001930

08006878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006880:	4b28      	ldr	r3, [pc, #160]	; (8006924 <prvInsertBlockIntoFreeList+0xac>)
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e002      	b.n	800688c <prvInsertBlockIntoFreeList+0x14>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	429a      	cmp	r2, r3
 8006894:	d8f7      	bhi.n	8006886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4413      	add	r3, r2
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d108      	bne.n	80068ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	441a      	add	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	441a      	add	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d118      	bne.n	8006900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b15      	ldr	r3, [pc, #84]	; (8006928 <prvInsertBlockIntoFreeList+0xb0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d00d      	beq.n	80068f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	e008      	b.n	8006908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068f6:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <prvInsertBlockIntoFreeList+0xb0>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e003      	b.n	8006908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d002      	beq.n	8006916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	2000191c 	.word	0x2000191c
 8006928:	20001924 	.word	0x20001924

0800692c <__libc_init_array>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4e0d      	ldr	r6, [pc, #52]	; (8006964 <__libc_init_array+0x38>)
 8006930:	4c0d      	ldr	r4, [pc, #52]	; (8006968 <__libc_init_array+0x3c>)
 8006932:	1ba4      	subs	r4, r4, r6
 8006934:	10a4      	asrs	r4, r4, #2
 8006936:	2500      	movs	r5, #0
 8006938:	42a5      	cmp	r5, r4
 800693a:	d109      	bne.n	8006950 <__libc_init_array+0x24>
 800693c:	4e0b      	ldr	r6, [pc, #44]	; (800696c <__libc_init_array+0x40>)
 800693e:	4c0c      	ldr	r4, [pc, #48]	; (8006970 <__libc_init_array+0x44>)
 8006940:	f000 f82c 	bl	800699c <_init>
 8006944:	1ba4      	subs	r4, r4, r6
 8006946:	10a4      	asrs	r4, r4, #2
 8006948:	2500      	movs	r5, #0
 800694a:	42a5      	cmp	r5, r4
 800694c:	d105      	bne.n	800695a <__libc_init_array+0x2e>
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006954:	4798      	blx	r3
 8006956:	3501      	adds	r5, #1
 8006958:	e7ee      	b.n	8006938 <__libc_init_array+0xc>
 800695a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800695e:	4798      	blx	r3
 8006960:	3501      	adds	r5, #1
 8006962:	e7f2      	b.n	800694a <__libc_init_array+0x1e>
 8006964:	08006a54 	.word	0x08006a54
 8006968:	08006a54 	.word	0x08006a54
 800696c:	08006a54 	.word	0x08006a54
 8006970:	08006a58 	.word	0x08006a58

08006974 <memcpy>:
 8006974:	b510      	push	{r4, lr}
 8006976:	1e43      	subs	r3, r0, #1
 8006978:	440a      	add	r2, r1
 800697a:	4291      	cmp	r1, r2
 800697c:	d100      	bne.n	8006980 <memcpy+0xc>
 800697e:	bd10      	pop	{r4, pc}
 8006980:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006988:	e7f7      	b.n	800697a <memcpy+0x6>

0800698a <memset>:
 800698a:	4402      	add	r2, r0
 800698c:	4603      	mov	r3, r0
 800698e:	4293      	cmp	r3, r2
 8006990:	d100      	bne.n	8006994 <memset+0xa>
 8006992:	4770      	bx	lr
 8006994:	f803 1b01 	strb.w	r1, [r3], #1
 8006998:	e7f9      	b.n	800698e <memset+0x4>
	...

0800699c <_init>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	bf00      	nop
 80069a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a2:	bc08      	pop	{r3}
 80069a4:	469e      	mov	lr, r3
 80069a6:	4770      	bx	lr

080069a8 <_fini>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	bf00      	nop
 80069ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ae:	bc08      	pop	{r3}
 80069b0:	469e      	mov	lr, r3
 80069b2:	4770      	bx	lr
